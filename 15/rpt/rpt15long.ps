%!PS-Adobe-2.0
%%Creator: dvips(k) 5.95a Copyright 2005 Radical Eye Software
%%Title: rpt15long.dvi
%%Pages: 9
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Times-Roman Times-Italic Times-Bold CMSY10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -t letter -D 600 rpt15long -o
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.06.20:1333
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "30 October 2002",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMSY10
%!PS-AdobeFont-1.1: CMSY10 1.0
%%CreationDate: 1991 Aug 15 07:20:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 2 /multiply put
readonly def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
27D1663E0B62F461F6E40A5D6676D1D12B51E641C1D4E8E2771864FC104F8CBF
5B78EC1D88228725F1C453A678F58A7E1B7BD7CA700717D288EB8DA1F57C4F09
0ABF1D42C5DDD0C384C7E22F8F8047BE1D4C1CC8E33368FB1AC82B4E96146730
DE3302B2E6B819CB6AE455B1AF3187FFE8071AA57EF8A6616B9CB7941D44EC7A
71A7BB3DF755178D7D2E4BB69859EFA4BBC30BD6BB1531133FD4D9438FF99F09
4ECC068A324D75B5F696B8688EEB2F17E5ED34CCD6D047A4E3806D000C199D7C
515DB70A8D4F6146FE068DC1E5DE8BC5703711DA090312BA3FC00A08C453C609
C627A8B149D71F3155BFBF5A359E54EFE40EB6AAF7344F336BBDFA5241D39DFD
19DFE4F1B56DCAAEA84D9290E81FFAD8472517CB517C9F8D04EAF8E87A58341D
57386FF17BF29235356C3F85FE85CCB75DFBD407A6B76C198356415768FE0D58
0F0E0665E6B2EFC269256FCE0146C415E35D900293555D8B6CB2AA451586E477
93461FAF0803AE54B9FEE351771B08F9F7D564B5F50CB4E660298DECF4DC0F67
0A4DA5738D89F708019CDFF9443964830B406748B60EF34EA35EDA7DF1C05A1E
A385C5DE4B171FCD735AA0C41E54B09D133E48FCAA3A75F1B05C2AD4CD792534
4160FCF0C48076AD3174E1A970FD9A285EB251E016B2739E373B43F17A1D50BC
02FB2383DACFF35A5503EE8D0C8147908BFF5FA0D9D06F243AA8B4FFFCD8FF4E
ED02BC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (rpt15long.dvi)
@start /Fa 137[42 42 23 32 28 1[42 42 42 65 23 42 1[23
42 42 28 37 42 37 1[37 7[60 5[46 55 1[46 1[60 1[51 1[32
28 1[60 3[55 1[60 8[42 2[42 1[42 42 42 42 2[28 21 44[{
.167 SlantFont TeXBase1Encoding ReEncodeFont}38 83.022
/Times-Roman rf /Fb 253[77 2[{}1 99.6264 /CMSY10 rf /Fc
135[50 2[55 33 1[44 2[50 55 83 3[28 55 2[44 1[44 55 50
12[66 6[94 7[66 17[50 1[50 3[33 45[{TeXBase1Encoding ReEncodeFont}19
99.6264 /Times-Bold rf /Fd 205[25 25 49[{TeXBase1Encoding ReEncodeFont}
2 49.8132 /Times-Roman rf /Fe 134[33 1[48 33 33 18 26
22 1[33 33 33 52 18 2[18 33 33 22 29 33 29 33 29 6[41
48 48 63 48 48 1[37 44 1[37 48 48 1[41 48 1[22 1[48 1[41
48 44 1[48 61 5[18 11[17 1[17 44[{TeXBase1Encoding ReEncodeFont}44
66.4176 /Times-Roman rf /Ff 253[65 2[{}1 83.022 /CMSY10
rf /Fg 134[42 1[60 42 46 28 32 37 1[46 42 46 69 23 46
1[23 46 42 28 37 46 37 46 42 11[60 55 46 60 1[51 65 60
78 55 2[32 65 65 51 55 1[60 55 60 6[28 42 42 42 42 42
42 42 42 42 42 23 21 28 21 2[28 28 40[{TeXBase1Encoding ReEncodeFont}56
83.022 /Times-Bold rf /Fh 87[28 16[83 42 1[37 25[37 42
42 60 42 42 23 32 28 42 42 42 42 65 23 42 23 23 42 42
28 37 42 37 42 37 3[28 1[28 51 60 60 78 60 60 51 46 55
1[46 60 60 74 51 60 32 28 60 60 46 51 60 55 55 60 1[37
3[23 23 42 42 42 42 42 42 42 42 42 42 23 21 28 21 2[28
28 28 5[28 30[46 2[{TeXBase1Encoding ReEncodeFont}79
83.022 /Times-Roman rf /Fi 205[29 29 49[{TeXBase1Encoding ReEncodeFont}
2 58.1154 /Times-Roman rf /Fj 133[32 37 1[55 1[42 23
32 32 1[42 42 42 60 23 37 1[23 3[37 42 37 42 42 7[46
51 1[51 2[42 51 1[51 60 55 1[46 1[37 28 60 60 3[55 1[51
1[42 5[42 3[42 2[42 42 42 1[21 28 21 44[{TeXBase1Encoding ReEncodeFont}
43 83.022 /Times-Italic rf /Fk 167[72 94 1[72 61 55 66
2[72 72 89 3[33 72 2[61 3[72 13[50 1[50 49[{
TeXBase1Encoding ReEncodeFont}15 99.6264 /Times-Roman
rf /Fl 167[58 9[58 9[58 2[58 65[{TeXBase1Encoding ReEncodeFont}4
79.701 /Times-Roman rf /Fm 138[37 2[25 2[37 37 1[21 10[33
22[29 25 1[54 3[50 1[54 1[33 5[37 1[37 37 37 37 37 37
37 37 48[{TeXBase1Encoding ReEncodeFont}21 74.7198 /Times-Roman
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 999 1
TeXDict begin 999 0 bop 1695 -103 a Fm(ICGA)1662 b(999)372
498 y Fk(M)t(O)t(H)t(E)t(X)33 b(W)t(I)t(N)t(S)h(H)t(E)t(X)d(1)t(1)t
Fl(X)t Fk(1)t(1)i Fl(A)t(N)t(D)d Fk(H)t(E)t(X)i(1)t(3)t
Fl(X)t Fk(1)t(3)g(T)r(O)t(U)t(R)t(N)q(A)t(M)5 b(E)g(N)g(T)g(S)1139
780 y Fj(Ryan)20 b(Haywar)m(d)1638 750 y Fi(1)1691 780
y Fj(and)f(J)m(akub)g(P)-7 b(awle)o(wicz)2399 750 y Fi(2)1468
1021 y Fh(Edmonton,)17 b(Canada)-80 -6 y Fj(ICGA)j(J)n(ournal)f(V)-9
b(ol.)20 b(XX)g(No.)g(YY)h(Sept)f(999)f(pp)h(??-??)679
b(Computer)19 b(Games)i(Olympiad,)e(2015)f(Leiden.)-80
1482 y Fg(1.)82 b(THE)21 b(T)o(OURN)n(AMENTS)-80 1726
y Fh(This)32 b(year)m(,)h(in)f(addition)e(to)i(the)g(11)p
Ff(\002)p Fh(11)e(He)o(x)h(tournament,)h(there)f(w)o(as)i(a)f(13)p
Ff(\002)p Fh(13)e(He)o(x)h(tournament.)58 b(Three)30
b(programs)-80 1825 y(competed)16 b(in)i(each)f(tournament:)24
b(E)t Fe(Z)t(O)c Fh(by)e(K)n(ei)g(T)-7 b(akada,)17 b(supervised)g(by)g
(Masahito)h(Y)-8 b(amamoto,)16 b(from)h(Japan;)j(M)t
Fe(O)t Fh(H)t Fe(E)t(X)g Fh(2.0)-80 1925 y(\(Huang)14
b Fj(et)j(al.)p Fh(,)g(2013\),)e(by)h(Broderick)e(Arneson,)i(Ryan)g
(Hayw)o(ard,)g(Philip)g(Henderson,)f(Aja)h(Huang,)g(and)g(Jakub)f(P)o
(a)o(wle)n(wicz,)-80 2025 y(from)k(Canada;)h(and)h(D)t
Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)h Fh(by)e(Jakub)g(P)o(a)o(wle)n(wicz,)f
(from)g(Poland.)-80 2182 y(After)k(the)h(tournaments)e(there)i(w)o(as)h
(an)f(informal)e(man-machine)f(e)o(xhibition:)31 b(T)-7
b(on)o(y)23 b(v)n(an)g(der)h(V)-9 b(alk)24 b(\()r(T)t(V)q(\),)h(the)f
(5th-rank)o(ed)-80 2282 y(He)o(x)c(player)f(on)h(Little)g(Golem,)g
(played)f(tw)o(o)h(games)g(\227)g(11)p Ff(\002)p Fh(11,)f(15m/player)e
(\227)k(each)f(against)i(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)g
Fh(and)f(M)t Fe(O)t Fh(H)t Fe(E)t(X)r Fh(.)-78 2440 y(E)t
Fe(Z)t(O)i Fh(is)e(a)g(stronger)f(v)o(ersion)f(of)i(the)f(program)f
(that)i(competed)e(in)i(the)f(2013)g(Olympiad.)27 b(E)t
Fe(Z)t(O)c Fh(uses)e(alpha-beta)e(search)h(with)-80 2539
y(an)k(e)n(v)n(aluation)g(function)f(based)h(on)g(a)i(weighted)d
(combination)g(of)h(tw)o(o)i(dif)n(ferent)d(netw)o(ork)g(connecti)n
(vity)g(measures.)40 b(E)t Fe(Z)t(O)-80 2639 y Fh(ran)19
b(on)h(an)g(i7)h(laptop.)-78 2797 y(D)t Fe(E)t(E)t(P)t
Fh(H)t Fe(E)t(X)g Fh(is)f(a)f(ne)n(w)g(program)e(based)i(on)f(Sibling)h
(Conspirac)o(y)f(Number)f(Search.)26 b(D)t Fe(E)t(E)t(P)t
Fh(H)t Fe(E)t(X)r Fh(,)19 b(lik)o(e)j(M)t Fe(O)t Fh(H)t
Fe(E)t(X)r Fh(,)d(is)h(based)f(on)-80 2896 y(the)25 b(Benzene)g(frame)n
(w)o(ork,)g(de)n(v)o(eloped)e(by)i(Broderick)g(Arneson,)g(Philip)h
(Henderson,)f(Ryan)g(Hayw)o(ard,)h(Aja)g(Huang,)g(and)-80
2996 y(Jakub)19 b(P)o(a)o(wle)n(wicz.)27 b(D)t Fe(E)t(E)t(P)t
Fh(H)t Fe(E)t(X)22 b Fh(ran)e(on)g(a)g(16)g(core)g(shared-memory)c
(machine.)24 b(As)d(an)g(opening)d(book,)i(D)t Fe(E)t(E)t(P)t
Fh(H)t Fe(E)t(X)j Fh(cached)-80 3096 y(its)e(e)n(v)n(aluation)d(scores)
j(in)f(a)h(database,)e(running)f(for)h(24)h(hours)g(on)f(each)h
(possible)g(opening.)-78 3253 y(M)t Fe(O)t Fh(H)t Fe(E)t(X)r
Fh(,)k(the)f(winner)f(of)h(the)g(pre)n(vious)f(four)g(Olympiad)g(He)o
(x)h(competitions,)f(is)i(an)f(MCTS)h(program)d(that)j(uses)f(the)h
(Ben-)-80 3353 y(zene)i(He)o(x)h(frame)n(w)o(ork)e(b)n(uilt)i(on)g(the)
g(code)f(base)i(of)g(F)t Fe(U)t(E)t(G)t(O)s Fh(,)h(the)e(Go)g(program)e
(de)n(v)o(eloped)f(by)j(Martin)g(M)7 b(\250)-35 b(uller)m(,)27
b(Markus)-80 3453 y(Enzenber)o(ger)17 b(and)j(others)f(at)i(the)g(Uni)n
(v)o(ersity)e(of)h(Alberta.)25 b(Benzene)20 b(allo)n(ws)h(virtual)e
(connection)g(and)h(inferior)e(cell)j(compu-)-80 3552
y(tations.)40 b(M)t Fe(O)t Fh(H)t Fe(E)t(X)27 b Fh(performs)c(these)i
(computations)e(in)i(UCT)g(tree)g(nodes)e(visited)i(at)g(least)h(256)e
(times.)40 b(M)t Fe(O)t Fh(H)t Fe(E)t(X)28 b Fh(ran)c(on)g(a)-80
3652 y(24)e(core)h(shared-memory)c(machine,)j(with)h(4)g(cores)g
(reserv)o(ed)e(for)i(the)g(Depth-First)f(Proof)g(Number)f(Search)i
(solv)o(er)m(,)f(which)-80 3751 y(produces)e(perfect)h(play)g(if)h(it)h
(solv)o(es)f(the)g(position)f(within)h(the)g(time)g(allotted)f(for)g(a)
i(mo)o(v)o(e.)30 b(M)t Fe(O)t Fh(H)t Fe(E)t(X)25 b Fh(prepared)20
b(an)h(opening)-80 3851 y(book)d(for)i(tw)o(o)g(11)p
Ff(\002)p Fh(11)f(openings)f(and)i(one)g(13)p Ff(\002)p
Fh(13)e(opening.)-80 4009 y(Here)i(are)g(the)g(tournament)e(scores)i
(\(playof)n(f)e(scores)j(inside)f(parentheses\).)p 724
4097 2125 4 v 722 4196 4 100 v 847 4166 a(11x11)p 1177
4196 V 173 w(M)t Fe(O)t Fh(H)t Fe(E)t(X)p 1567 4196 V
104 w Fh(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)p 2022 4196
V 103 w Fh(E)t Fe(Z)t(O)p 2273 4196 V 101 w Fh(total)p
2521 4196 V 120 w(result)p 2846 4196 V 724 4200 2125
4 v 722 4299 4 100 v 808 4269 a(M)t Fe(O)t Fh(H)t Fe(E)t(X)p
1177 4299 V 1567 4299 V 646 w Fh(3-1)p 2022 4299 V 241
w(4-0)p 2273 4299 V 137 w(7-1)p 2521 4299 V 156 w(gold)p
2846 4299 V 724 4302 2125 4 v 722 4402 4 100 v 776 4372
a(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)p 1177 4402 V 190
w Fh(1-3)p 1567 4402 V 2022 4402 V 664 w(4-0)p 2273 4402
V 137 w(5-3)p 2521 4402 V 139 w(silv)o(er)p 2846 4402
V 724 4405 2125 4 v 722 4505 4 100 v 877 4475 a(E)t Fe(Z)t(O)p
1177 4505 V 293 w Fh(0-4)p 1567 4505 V 311 w(0-4)p 2022
4505 V 2273 4505 V 490 w(0-8)p 2521 4505 V 117 w(bronze)p
2846 4505 V 724 4508 2125 4 v 646 4578 2281 4 v 644 4678
4 100 v 769 4648 a(13x13)p 1099 4678 V 177 w(M)t Fe(O)t
Fh(H)t Fe(E)t(X)p 1496 4678 V 106 w Fh(D)t Fe(E)t(E)t(P)t
Fh(H)t Fe(E)t(X)p 1951 4678 V 103 w Fh(E)t Fe(Z)t(O)p
2202 4678 V 176 w Fh(total)p 2599 4678 V 195 w(result)p
2924 4678 V 646 4681 2281 4 v 644 4781 4 100 v 730 4751
a(M)t Fe(O)t Fh(H)t Fe(E)t(X)p 1099 4781 V 1496 4781
V 559 w Fh(2-2)g(\(2-0\))p 1951 4781 V 147 w(4-0)p 2202
4781 V 118 w(6-2)g(\(2-0\))p 2599 4781 V 137 w(gold)p
2924 4781 V 646 4784 2281 4 v 644 4884 4 100 v 697 4854
a(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)p 1099 4884 V 101
w Fh(2-2)g(\(0-2\))p 1496 4884 V 1951 4884 V 573 w(4-0)p
2202 4884 V 118 w(6-2)g(\(0-2\))p 2599 4884 V 119 w(silv)o(er)p
2924 4884 V 646 4887 2281 4 v 644 4987 4 100 v 799 4957
a(E)t Fe(Z)t(O)p 1099 4987 V 297 w Fh(0-4)p 1496 4987
V 314 w(0-4)p 1951 4987 V 2202 4987 V 565 w(0-8)p 2599
4987 V 191 w(bronze)p 2924 4987 V 646 4990 2281 4 v -80
5243 a Fg(2.)82 b(THE)21 b(GAMES)-80 5487 y Fh(Each)j(tournament)e(w)o
(as)j(a)g(three-player)d(double)h(round)f(robin,)i(so)h(12)f(games,)h
(i.e.)f(8)g(games)g(for)g(each)g(player)-5 b(.)37 b(Post-game)-80
5587 y(win-detection)18 b(is)j(by)f(our)f(solv)o(er)-5
b(.)25 b(T)-7 b(on)o(y)19 b(v)n(an)h(der)f(W)-7 b(alk)21
b(contrib)n(uted)e(to)h(this)h(commentary)-5 b(.)p -80
5656 1493 4 v 10 5711 a Fd(1)39 5735 y Fe(Department)19
b(of)e(Computing)i(Science,)g(Uni)n(v)o(ersity)g(of)e(Alberta,)h
(Canada.)23 b(Email:hayw)o(ard@ualberta.ca)10 5792 y
Fd(2)39 5816 y Fe(Institute)d(of)c(Informatics,)j(Uni)n(v)o(ersity)g
(of)e(W)-5 b(arsa)o(w)l(,)16 b(Poland.)22 b(Email:pan@mimuw)l(.edu.pl)p
eop end
%%Page: 1000 2
TeXDict begin 1000 1 bop 109 -103 a Fm(1000)1507 b(ICGA)18
b(Journal)1557 b(???)109 215 y Fc(11)p Fb(\002)p Fc(11)24
b(T)-9 b(our)o(nament)107 b Fh(D)t(:)25 b(D)t Fe(E)t(E)t(P)t
Fh(H)t Fe(E)t(X)66 b Fh(E)t(:)25 b(E)t Fe(Z)t(O)66 b
Fh(M)t(:)25 b(M)t Fe(O)t Fh(H)t Fe(E)t(X)109 373 y Fg(Game)20
b(1.)27 b Fh(E)t(-)t(M)d(0)t(-)t(1)t(.)j(1.B[a7])19 b(2.W[sw)o(ap])g
(3.W[c9])g(.)12 b(.)g(.)656 b(M)t Fe(O)t Fh(H)t Fe(E)t(X)22
b Fh(sees)f(the)g(win)f(by)g(mo)o(v)o(e)e(30.B[e4].)109
531 y Fg(Game)i(2.)27 b Fh(D)t(-)t(E)d(1)t(-)t(0)t(.)j(1.B[a3])19
b(2.W[c9])g(.)12 b(.)g(.)864 b(E)t Fe(Z)t(O)22 b Fh(opens)e(well,)g(b)n
(ut)g(blunders:)k(28.W[h2])18 b(wins.)109 689 y Fg(Game)i(3.)27
b Fh(M)t(-)t(D)d(1)t(-)t(0)t(.)j(1.B[a2])19 b(2.W[sw)o(ap])g(3.W[a6])g
(.)12 b(.)g(.)347 b(M)t Fe(O)t Fh(H)t Fe(E)t(X)23 b Fh(scores)d
(increases)g(steadily)-5 b(.)25 b(Mo)o(v)o(e)19 b(19)g(wins.)109
846 y Fg(Game)h(4.)27 b Fh(M)t(-)t(E)d(1)t(-)t(0)t(.)j(1.B[a2])19
b(2.W[j2])g(3.B[g6])g(.)12 b(.)g(.)178 b(M)t Fe(O)t Fh(H)t
Fe(E)t(X)22 b Fh(is)f(happ)o(y)e(with)j(E)t Fe(Z)t(O)r
Fh(')-5 b(s)21 b(ro)n(w)f(2)g(ladder)-5 b(.)25 b(Mo)o(v)o(e)19
b(17)g(wins.)109 1004 y Fg(Game)h(5.)27 b Fh(E)t(-)t(D)d(0)t(-)t(1)t(.)
j(1.B[k5])19 b(2.W[sw)o(ap])g(3.W[i3])g(.)12 b(.)g(.)481
1162 y(E)t Fe(Z)t(O)22 b Fh(plays)e(27.W[i4])f(instead)h(of)g(j8)g(or)g
(other)g(options)f(that)h(look)g(safer)-5 b(.)27 b(D)t
Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)22 b Fh(sees)f(that)f(28.B[k2])e(wins.)
109 1320 y Fg(Game)i(6.)27 b Fh(D)t(-)t(M)d(1)t(-)t(0)t(.)j(1.B[g2])19
b(2.W[sw)o(ap])g(3.W[e4])g(.)12 b(.)g(.)449 b(M)t Fe(O)t
Fh(H)t Fe(E)t(X)22 b Fh(is)f(ne)n(v)o(er)e(comfortable.)k(23.W[c9])18
b(wins.)109 1477 y Fg(Game)i(7.)27 b Fh(E)t(-)t(M)d(0)t(-)t(1)t(.)j
(1.B[f10])18 b(2.W[sw)o(ap])i(3.W[f6])e(.)12 b(.)g(.)1496
b(Mo)o(v)o(e)19 b(16)g(wins.)109 1635 y Fg(Game)h(8.)27
b Fh(D)t(-)t(E)d(1)t(-)t(0)t(.)j(1.B[f2])19 b(2.W[d6])f(3.W[e6])h(.)12
b(.)g(.)1629 b(Mo)o(v)o(e)19 b(13)g(wins.)109 1793 y
Fg(Game)h(9.)27 b Fh(M)t(-)t(D)d(1)t(-)t(0)t(.)j(1.B[a6])19
b(2.W[sw)o(ap])g(3.W[g5])g(.)12 b(.)g(.)109 1951 y(At)26
b(mo)o(v)o(e)d(22,)28 b(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)f
Fh(hesitates)f(between)f(j5,)h(which)f(loses,)i(and)e(i8,)h(which)f
(leads)g(to)h(complicated)d(positions)i(where)111 2050
y(M)t Fe(O)t Fh(H)t Fe(E)t(X)d Fh(cannot)d(\002nd)h(correct)f(mo)o(v)o
(es.)24 b(But)f(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)f
Fh(plays)e(22.B[j5].)k(Mo)o(v)o(e)18 b(30)i(wins.)109
2208 y Fg(Game)g(10.)26 b Fh(M)t(-)t(E)e(1)t(-)t(0)t(.)j(1.B[a6])19
b(2.W[c9])g(3.W[g7])g(.)12 b(.)g(.)1564 b(Mo)o(v)o(e)19
b(26)g(wins.)109 2366 y Fg(Game)h(11.)26 b Fh(E)t(-)t(D)f(0)t(-)t(1)t
(.)h(1.B[e10])19 b(2.W[g8])g(3.W[f8])f(.)12 b(.)g(.)1546
b(Mo)o(v)o(e)19 b(25)g(wins.)109 2523 y Fg(Game)h(12.)26
b Fh(D)t(-)t(M)f(0)t(-)t(1)t(.)h(1.B[e2])19 b(2.W[f6])g(3.B[c8])g(.)12
b(.)g(.)492 b(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)22 b
Fh(is)f(ne)n(v)o(er)e(comfortable.)k(Mo)o(v)o(e)c(13)g(wins.)109
2839 y Fc(13)p Fb(\002)p Fc(13)24 b(T)-9 b(our)o(nament)107
b Fh(D)t(:)25 b(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)66
b Fh(E)t(:)25 b(E)t Fe(Z)t(O)66 b Fh(M)t(:)25 b(M)t Fe(O)t
Fh(H)t Fe(E)t(X)109 2997 y Fg(Game)20 b(1.)27 b Fh(E)t(-)t(M)d(0)t(-)t
(1)t(.)j(1.B[a8])19 b(2.W[sw)o(ap])g(3.W[b12])f(.)12
b(.)g(.)1473 b(Mo)o(v)o(e)19 b(30)g(wins.)109 3154 y
Fg(Game)h(2.)27 b Fh(D)t(-)t(E)d(1)t(-)t(0)t(.)j(1.B[a10])18
b(2.W[l2])i(3.B[j3])f(.)12 b(.)g(.)1633 b(Mo)o(v)o(e)19
b(31)g(wins.)109 3312 y Fg(Game)26 b(3.)44 b Fh(M)t(-)t(D)31
b(1)t(-)t(0)t(.)45 b(1.B[a7])25 b(2.W[sw)o(ap])g(3.W[i5])g(.)12
b(.)g(.)67 b(F)o(or)25 b(man)o(y)g(mo)o(v)o(es,)i(both)e(programs)f
(see)j(this)g(game)e(as)i(e)n(v)o(en.)111 3412 y(M)t
Fe(O)t Fh(H)t Fe(E)t(X)33 b Fh(turns)d(the)h(corner)e(with)i(mo)o(v)o
(e)e(29,)k(not)d(seeing)g(ho)n(w)h(to)f(use)h(i5)g(to)g(connect)f(to)g
(the)h(right)f(side.)57 b(45.W[g4])29 b(is)109 3511 y(une)o(xpected,)17
b(b)n(ut)j(wins.)26 b(This)20 b(game)f(sho)n(ws)h(the)g(importance)f
(of)h(virtual)f(connections)g(and)g(an)h(endgame)e(solv)o(er)-5
b(.)109 3669 y Fg(Game)20 b(4.)27 b Fh(M)t(-)t(E)d(1)t(-)t(0)t(.)j
(1.B[a7])19 b(2.W[c11])f(3.B[i8])i(.)12 b(.)g(.)981 b(M)t
Fe(O)t Fh(H)t Fe(E)t(X)23 b Fh(\002nds)d(a)h(win)f(by)g(35.B[h3].)109
3827 y Fg(Game)d(5.)26 b Fh(E)t(-)t(D)c(0)t(-)t(1)t(.)k(1.B[m3])16
b(2.W[sw)o(ap])h(3.W[l2])f(.)c(.)g(.)49 b(28.W[f2])16
b(looks)h(reasonable,)f(b)n(ut)i(is)g(out)g(of)f(the)h(mustplay)e(re)o
(gion)109 3926 y(computed)i(by)i(Benzene')-5 b(s)20 b(virtual)f
(connection)f(engine,)h(so)k(D)t Fe(E)t(E)t(P)t Fh(H)t
Fe(E)t(X)f Fh(\002nds)e(a)g(win)h(with)f(the)g(ne)o(xt)g(mo)o(v)o(e.)
109 4084 y Fg(Game)g(6.)27 b Fh(D)t(-)t(M)d(1)t(-)t(0)t(.)j(1.B[j2])19
b(2.W[g8])g(3.W[d10])f(.)12 b(.)g(.)278 4242 y(Another)19
b(close)h(game.)26 b(M)t Fe(O)t Fh(H)t Fe(E)t(X)c Fh(blunders)d(with)h
(54.W[f9];)f(54.W[l11])f(wins.)28 b(D)t Fe(E)t(E)t(P)t
Fh(H)t Fe(E)t(X)22 b Fh(sees)f(the)f(win)g(soon)g(after)-5
b(.)109 4400 y Fg(Game)20 b(7.)27 b Fh(E)t(-)t(M)d(0)t(-)t(1)t(.)j
(1.B[m8])18 b(2.W[f8])h(3.B[b12])g(.)12 b(.)g(.)915 b(M)t
Fe(O)t Fh(H)t Fe(E)t(X)22 b Fh(sees)f(the)f(win)h(by)e(mo)o(v)o(e)g
(38.)109 4557 y Fg(Game)g(8.)27 b Fh(D)t(-)t(E)c(1)t(-)t(0)t(.)k
(1.B[a11])18 b(2.W[b12])f(3.B[c11])h(.)12 b(.)g(.)54
b(E)t Fe(Z)t(O)22 b Fh(looks)d(behind)f(early)-5 b(,)20
b(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)i Fh(sees)e(a)g(win)f(by)g(mo)o(v)
o(e)f(23.)109 4715 y Fg(Game)i(9.)27 b Fh(M)t(-)t(D)d(1)t(-)t(0)t(.)j
(1.B[a7])19 b(2.W[sw)o(ap])g(3.W[i5])h(.)12 b(.)g(.)347
4873 y(The)20 b(same)g(opening)e(as)j(Game)f(3.)25 b(Non-deterministic)
20 b(M)t Fe(O)t Fh(H)t Fe(E)t(X)j Fh(plays)d(dif)n(ferently)e(from)h
(mo)o(v)o(e)g(5.)25 b(Mo)o(v)o(e)19 b(33)g(wins.)109
5031 y Fg(Game)h(10.)26 b Fh(M)t(-)t(E)e(1)t(-)t(0)t(.)j(1.B[a7])19
b(2.W[c11])g(3.W[i8])g(.)12 b(.)g(.)272 5188 y(M)t Fe(O)t
Fh(H)t Fe(E)t(X)23 b Fh(score)d(jumps)f(after)h(10.W[g12])e(\(e)o
(xpected)g(k3\))h(and)h(after)g(24.W[j3].)26 b(M)t Fe(O)t
Fh(H)t Fe(E)t(X)c Fh(sees)f(the)f(win)h(by)e(mo)o(v)o(e)g(27.)109
5346 y Fg(Game)31 b(11.)62 b Fh(E)t(-)t(D)36 b(0)t(-)t(1)t(.)61
b(1.B[a4])31 b(2.W[sw)o(ap])g(3.W[k3])g(.)12 b(.)g(.)77
b(A)32 b(close)g(game.)59 b(From)31 b(mo)o(v)o(e)g(20,)36
b(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)d Fh(beha)n(v)o(es)109
5446 y(une)o(xpectedly)-5 b(,)19 b(perhaps)h(because)i(its)h(mo)o(v)o
(e)e(selection)h(does)f(not)h(consider)f(inferior)g(cells:)30
b(mo)o(v)o(e)20 b(28)i(considers)f(neither)h(a3)109 5545
y(nor)g(f2)h(\(which)f(captures)h(a3\).)33 b(Here)25
b(M)t Fe(O)t Fh(H)t Fe(E)t(X)h Fh(lik)o(es)e(f2,)f(b)n(ut)i(D)t
Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)g Fh(plays)e(k4.)36 b(E)t
Fe(Z)t(O)25 b Fh(then)e(tak)o(es)g(a3,)h(and)f(gets)g(into)g(a)109
5645 y(winning)17 b(position:)24 b(47.W[k11])17 b(wins,)i(although)e
(this)j(tak)o(es)f(the)h(solv)o(er)e(a)h(long)g(time)g(to)g(check.)24
b(But)d(E)t Fe(Z)t(O)h Fh(plays)c(47.W[j10])109 5745
y(and)j(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)h Fh(grinds)e(out)f(a)i
(win.)p eop end
%%Page: 1001 3
TeXDict begin 1001 2 bop 1695 -103 a Fm(ICGA)1625 b(1001)-80
215 y Fg(Game)20 b(12.)26 b Fh(D)t(-)t(M)f(0)t(-)t(1)t(.)h(1.B[d2])19
b(2.W[e9])g(3.B[g8])g(.)12 b(.)g(.)413 b(M)t Fe(O)t Fh(H)t
Fe(E)t(X)23 b Fh(ne)n(v)o(er)18 b(looks)i(comfortable.)j(Mo)o(v)o(e)c
(35)g(wins.)-80 373 y Fg(Play)n(off)29 b(Game)j(1.)61
b Fh(M)t(-)t(D)36 b(1)t(-)t(0)t(.)61 b(1.B[a7])30 b(2.W[h12])g
(3.B[c11])f(.)12 b(.)g(.)77 b(Earlier)33 b(D)t Fe(E)t(E)t(P)t
Fh(H)t Fe(E)t(X)h Fh(sw)o(apped)c(and)h(lost,)k(so)d(here)-80
473 y(not-sw)o(aps.)26 b(M)t Fe(O)t Fh(H)t Fe(E)t(X)d
Fh(scores)d(increase)g(gradually)-5 b(.)22 b(Mo)o(v)o(e)d(46)h(wins.)
-80 631 y Fg(Play)n(off)25 b(Game)i(2.)48 b Fh(D)t(-)t(M)32
b(0)t(-)t(1)t(.)48 b(1.B[j2])26 b(2.W[sw)o(ap])h(3.W[d3])f(.)12
b(.)g(.)68 b(Earlier)29 b(M)t Fe(O)t Fh(H)t Fe(E)t(X)g
Fh(not-sw)o(apped)c(and)i(lost,)i(so)f(here)-80 730 y(sw)o(aps.)d(No)20
b(stones)h(touch)e(until)h(mo)o(v)o(e)f(14.)26 b(M)t
Fe(O)t Fh(H)t Fe(E)t(X)d Fh(sees)e(a)g(win)f(by)g(mo)o(v)o(e)e(24.)-80
888 y Fc(11)p Fb(\002)p Fc(11)29 b(Man-Machine)h(Exhibition)124
b Fh(D)t(:)29 b(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)76
b Fh(M)t(:)28 b(M)t Fe(O)t Fh(H)t Fe(E)t(X)77 b Fh(T:)28
b(T)s Fe(O)t(N)t(Y)g(V)-5 b(A)t(N)29 b(D)t(E)t(R)f Fh(W)-5
b Fe(A)t(L)t(K)124 b Fh(Each)-80 988 y(player)19 b(had)h(15)f(minutes)h
(for)g(all)g(mo)o(v)o(es.)k(The)c(bots)g(w)o(on)g(all)h(games.)-80
1145 y Fg(Game)f(1.)27 b Fh(M)t(-)t(T)d(1)t(-)t(0)t(.)j(1.B[a2])19
b(2.W[sw)o(ap])g(3.W[f6])g(.)12 b(.)g(.)1528 b(Mo)o(v)o(e)19
b(23)g(wins.)-80 1303 y Fg(Game)h(2.)27 b Fh(T)l(-)t(M)d(0)t(-)t(1)t(.)
j(1.B[f2])19 b(2.W[e7])g(3.B[c8])g(.)12 b(.)g(.)1650
b(Mo)o(v)o(e)19 b(16)g(wins.)-80 1461 y Fg(Game)h(3.)27
b Fh(D)t(-)t(T)d(1)t(-)t(0)t(.)j(1.B[g2])19 b(2.W[f4])f(3.B[h5])h(.)12
b(.)g(.)1647 b(Mo)o(v)o(e)19 b(15)g(wins.)-80 1618 y
Fg(Game)h(4.)27 b Fh(T)l(-)t(D)d(0)t(-)t(1)t(.)j(1.B[f2])19
b(2.W[h9])g(3.B[f9])g(.)12 b(.)g(.)1668 b(Mo)o(v)o(e)19
b(24)g(wins.)-80 1907 y Fg(3.)82 b(CONCLUSIONS)-78 2151
y Fh(E)t Fe(Z)t(O)q Fh(')-5 b(s)17 b(performance)d(w)o(as)j(stronger)d
(than)i(its)h(record)e(indicates.)23 b(It)17 b(played)e(some)h(strong)f
(openings)g(and)g(had)h(winning)f(mo)o(v)o(es)-80 2250
y(deep)k(into)h(games)g(against)h(D)t Fe(E)t(E)t(P)t
Fh(H)t Fe(E)t(X)q Fh(.)26 b(It)20 b(w)o(as)h(unluck)o(y)d(not)i(to)h
(win)f(a)g(game.)-78 2408 y(D)t Fe(E)t(E)t(P)t Fh(H)t
Fe(E)t(X)i Fh(and)g(M)t Fe(O)t Fh(H)t Fe(E)t(X)i Fh(were)c(e)n(v)o
(enly)g(matched,)f(b)n(ut)i(play)f(dif)n(ferent)f(styles.)30
b(M)t Fe(O)t Fh(H)t Fe(E)t(X)23 b Fh(seems)e(stronger)e(in)i(opening)e
(and)-80 2508 y(early)g(middle)f(play)-5 b(,)19 b(b)n(ut)g(its)i(Monte)
e(Carlo)g(simulations)g(cannot)g(handle)f(tactical)i(positions.)26
b(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)21 b Fh(thri)n(v)o(es)e(on)g
(tactical)-80 2607 y(positions,)g(and)h(is)h(especially)f(strong)f(in)h
(the)g(late)h(middle)e(game)h(in)g(complicated)f(positions.)-80
2765 y(REFERENCES)i(T)o(O)f(BE)h(ADDED)-80 2923 y Fg(Ackno)o
(wledgements.)39 b Fh(W)-7 b(e)26 b(thank)e(the)h(NSERC)h(Disco)o(v)o
(ery)d(Grant)i(Program)e(for)h(research)g(funding)f(and)i(Martin)f(M)7
b(\250)-35 b(uller)-80 3022 y(for)19 b(loaning)g(the)h(use)h(of)f(his)g
(machine.)-80 3311 y Fg(4.)82 b(REFERENCES)-80 3530 y
Fh(Huang,)25 b(S.,)h(Arneson,)f(B.,)i(Hayw)o(ard,)e(R.)h(B.,)h(M)7
b(\250)-35 b(uller)m(,)26 b(M.,)g(and)f(P)o(a)o(wle)n(wicz,)g(J.)h
(\(2013\).)43 b(MoHe)o(x)24 b(2.0:)35 b(A)25 b(P)o(attern-Based)-80
3629 y(MCTS)e(He)o(x)f(Player)-5 b(.)36 b Fa(Computers)21
b(and)h(Games)h(-)f(8th)g(International)f(Conference,)g(CG)i(2013,)e(Y)
-9 b(ok)o(ohama,)21 b(Japan,)h(August)-80 3729 y(13-15,)16
b(2013,)g(Re)n(vised)h(Selected)g(P)o(apers)g Fh(\(eds.)g(H.)h(J.)g(v)n
(an)f(den)g(Herik,)g(H.)h(Iida,)f(and)g(A.)g(Plaat\),)h(V)-11
b(ol.)18 b(8427)e(of)h Fa(Lecture)f(Notes)-80 3829 y(in)k(Computer)f
(Science)p Fh(,)h(pp.)f(60\22671,)f(Springer)-5 b(.)-80
5149 y @beginspecial 0 @llx 0 @lly 175 @urx 108 @ury
2275 @rwi @setspecial
%%BeginDocument: 1e-m.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

7 1 (1) 1 HexBlackLabelledPiece 
7 1 (S) 1 HexBlackLabelledPiece
9 3 (3) 1 HexWhiteLabelledPiece 
6 8 (4) 1 HexBlackLabelledPiece 
10 4 (5) 1 HexWhiteLabelledPiece 
9 6 (6) 1 HexBlackLabelledPiece 
11 5 (7) 1 HexWhiteLabelledPiece 
10 7 (8) 1 HexBlackLabelledPiece 
8 7 (9) 1 HexWhiteLabelledPiece 
8 4 (10) 2 HexBlackLabelledPiece 
2 8 (11) 2 HexWhiteLabelledPiece 
5 2 (12) 2 HexBlackLabelledPiece 
2 5 (13) 2 HexWhiteLabelledPiece 
3 3 (14) 2 HexBlackLabelledPiece 
6 2 (15) 2 HexWhiteLabelledPiece 
4 8 (16) 2 HexBlackLabelledPiece 
3 9 (17) 2 HexWhiteLabelledPiece 
3 8 (18) 2 HexBlackLabelledPiece 
2 9 (19) 2 HexWhiteLabelledPiece 
3 7 (20) 2 HexBlackLabelledPiece 
8 6 (21) 2 HexWhiteLabelledPiece 
9 4 (22) 2 HexBlackLabelledPiece 
10 3 (23) 2 HexWhiteLabelledPiece 
9 5 (24) 2 HexBlackLabelledPiece 
9 7 (25) 2 HexWhiteLabelledPiece 
10 6 (26) 2 HexBlackLabelledPiece 
2 7 (27) 2 HexWhiteLabelledPiece 
7 6 (28) 2 HexBlackLabelledPiece 
3 6 (29) 2 HexWhiteLabelledPiece 
4 5 (30) 2 HexBlackLabelledPiece 
7 5 (31) 2 HexWhiteLabelledPiece 
8 5 (32) 2 HexBlackLabelledPiece 
1 4 (33) 2 HexWhiteLabelledPiece 
2 2 (34) 2 HexBlackLabelledPiece 
5 4 (35) 2 HexWhiteLabelledPiece 
5 3 (36) 2 HexBlackLabelledPiece 
4 4 (37) 2 HexWhiteLabelledPiece 
6 3 (38) 2 HexBlackLabelledPiece 
3 2 (39) 2 HexWhiteLabelledPiece 
2 3 (40) 2 HexBlackLabelledPiece 
7 4 (41) 2 HexWhiteLabelledPiece 
5 5 (42) 2 HexBlackLabelledPiece 
5 6 (43) 2 HexWhiteLabelledPiece 
4 6 (44) 2 HexBlackLabelledPiece 
6 7 (45) 2 HexWhiteLabelledPiece 
6 6 (46) 2 HexBlackLabelledPiece 
11 7 (47) 2 HexWhiteLabelledPiece 
11 6 (48) 2 HexBlackLabelledPiece 
5 7 (49) 2 HexWhiteLabelledPiece 
6 5 (50) 2 HexBlackLabelledPiece 
4 2 (51) 2 HexWhiteLabelledPiece 
3 5 (52) 2 HexBlackLabelledPiece 
1 2 (53) 2 HexWhiteLabelledPiece 
2 6 (54) 2 HexBlackLabelledPiece 
1 6 (55) 2 HexWhiteLabelledPiece 
1 7 (56) 2 HexBlackLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1659 w @beginspecial 0 @llx 0 @lly 175 @urx
108 @ury 2275 @rwi @setspecial
%%BeginDocument: 2d-e.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

8 1 (1) 1 HexBlackLabelledPiece 
9 3 (2) 1 HexWhiteLabelledPiece 
10 1 (3) 1 HexBlackLabelledPiece 
5 8 (4) 1 HexWhiteLabelledPiece 
6 6 (5) 1 HexBlackLabelledPiece 
4 7 (6) 1 HexWhiteLabelledPiece 
6 2 (7) 1 HexBlackLabelledPiece 
5 5 (8) 1 HexWhiteLabelledPiece 
4 4 (9) 1 HexBlackLabelledPiece 
3 4 (10) 2 HexWhiteLabelledPiece 
3 5 (11) 2 HexBlackLabelledPiece 
7 4 (12) 2 HexWhiteLabelledPiece 
4 10 (13) 2 HexBlackLabelledPiece 
11 1 (14) 2 HexWhiteLabelledPiece 
10 2 (15) 2 HexBlackLabelledPiece 
9 1 (16) 2 HexWhiteLabelledPiece 
8 5 (17) 2 HexBlackLabelledPiece 
10 4 (18) 2 HexWhiteLabelledPiece 
8 8 (19) 2 HexBlackLabelledPiece 
6 9 (20) 2 HexWhiteLabelledPiece 
4 6 (21) 2 HexBlackLabelledPiece 
5 6 (22) 2 HexWhiteLabelledPiece 
6 4 (23) 2 HexBlackLabelledPiece 
6 5 (24) 2 HexWhiteLabelledPiece 
8 3 (25) 2 HexBlackLabelledPiece 
7 3 (26) 2 HexWhiteLabelledPiece 
4 8 (27) 2 HexBlackLabelledPiece 
5 7 (28) 2 HexWhiteLabelledPiece 
8 2 (29) 2 HexBlackLabelledPiece 
5 3 (30) 2 HexWhiteLabelledPiece 
5 1 (31) 2 HexBlackLabelledPiece 
8 4 (32) 2 HexWhiteLabelledPiece 
9 2 (33) 2 HexBlackLabelledPiece 
5 2 (34) 2 HexWhiteLabelledPiece 
6 1 (35) 2 HexBlackLabelledPiece 
4 2 (36) 2 HexWhiteLabelledPiece 
4 1 (37) 2 HexBlackLabelledPiece 
7 2 (38) 2 HexWhiteLabelledPiece 
7 1 (39) 2 HexBlackLabelledPiece 
11 2 (40) 2 HexWhiteLabelledPiece 
10 3 (41) 2 HexBlackLabelledPiece 
9 4 (42) 2 HexWhiteLabelledPiece 
11 3 (43) 2 HexBlackLabelledPiece 
2 2 (44) 2 HexWhiteLabelledPiece 
3 2 (45) 2 HexBlackLabelledPiece 
2 3 (46) 2 HexWhiteLabelledPiece 
3 3 (47) 2 HexBlackLabelledPiece 
2 5 (48) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial eop end
%%Page: 1002 4
TeXDict begin 1002 3 bop 109 -103 a Fm(1002)1507 b(ICGA)18
b(Journal)1557 b(???)109 1302 y @beginspecial 0 @llx
0 @lly 175 @urx 108 @ury 2275 @rwi @setspecial
%%BeginDocument: 3m-d.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

2 1 (1) 1 HexBlackLabelledPiece 
2 1 (S) 1 HexBlackLabelledPiece
6 6 (3) 1 HexWhiteLabelledPiece 
6 7 (4) 1 HexBlackLabelledPiece 
5 7 (5) 1 HexWhiteLabelledPiece 
5 8 (6) 1 HexBlackLabelledPiece 
4 8 (7) 1 HexWhiteLabelledPiece 
4 9 (8) 1 HexBlackLabelledPiece 
3 9 (9) 1 HexWhiteLabelledPiece 
7 4 (10) 2 HexBlackLabelledPiece 
8 7 (11) 2 HexWhiteLabelledPiece 
6 3 (12) 2 HexBlackLabelledPiece 
8 4 (13) 2 HexWhiteLabelledPiece 
8 6 (14) 2 HexBlackLabelledPiece 
9 6 (15) 2 HexWhiteLabelledPiece 
6 10 (16) 2 HexBlackLabelledPiece 
5 10 (17) 2 HexWhiteLabelledPiece 
2 10 (18) 2 HexBlackLabelledPiece 
9 5 (19) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1659 w @beginspecial 0 @llx 0 @lly 175 @urx
108 @ury 2275 @rwi @setspecial
%%BeginDocument: 4m-e.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

2 1 (1) 1 HexBlackLabelledPiece 
2 10 (2) 1 HexWhiteLabelledPiece 
6 7 (3) 1 HexBlackLabelledPiece 
3 8 (4) 1 HexWhiteLabelledPiece 
5 5 (5) 1 HexBlackLabelledPiece 
2 7 (6) 1 HexWhiteLabelledPiece 
3 7 (7) 1 HexBlackLabelledPiece 
2 8 (8) 1 HexWhiteLabelledPiece 
3 6 (9) 1 HexBlackLabelledPiece 
2 6 (10) 2 HexWhiteLabelledPiece 
3 5 (11) 2 HexBlackLabelledPiece 
2 5 (12) 2 HexWhiteLabelledPiece 
3 4 (13) 2 HexBlackLabelledPiece 
2 4 (14) 2 HexWhiteLabelledPiece 
3 3 (15) 2 HexBlackLabelledPiece 
6 5 (16) 2 HexWhiteLabelledPiece 
5 7 (17) 2 HexBlackLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 109 1460 a Fg(11)p Ff(\002)p Fg(11:)50 b(Games)34
b(1-4)f(\(top)g(left/right,)k(bottom)c(left/right\).)66
b Fh(E)t Fe(Z)t(O)r Fh(-)r(M)t Fe(O)t Fh(H)t Fe(E)t(X)36
b Fh(0-1,)i(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)r Fh(-)r(E)t
Fe(Z)t(O)d Fh(1-0,)j(M)t Fe(O)t Fh(H)t Fe(E)t(X)r Fh(-)111
1560 y(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)22 b Fh(0-1,)f(M)t
Fe(O)t Fh(H)t Fe(E)t(X)r Fh(-)r(E)t Fe(Z)t(O)h Fh(1-0.)109
2808 y @beginspecial 0 @llx 0 @lly 175 @urx 108 @ury
2275 @rwi @setspecial
%%BeginDocument: 5e-d.swap.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

5 11 (1) 1 HexBlackLabelledPiece 
5 11 (S) 1 HexBlackLabelledPiece
3 9 (3) 1 HexWhiteLabelledPiece 
5 5 (4) 1 HexBlackLabelledPiece 
6 5 (5) 1 HexWhiteLabelledPiece 
6 4 (6) 1 HexBlackLabelledPiece 
7 4 (7) 1 HexWhiteLabelledPiece 
5 6 (8) 1 HexBlackLabelledPiece 
6 6 (9) 1 HexWhiteLabelledPiece 
7 3 (10) 2 HexBlackLabelledPiece 
8 3 (11) 2 HexWhiteLabelledPiece 
5 8 (12) 2 HexBlackLabelledPiece 
6 8 (13) 2 HexWhiteLabelledPiece 
7 7 (14) 2 HexBlackLabelledPiece 
6 7 (15) 2 HexWhiteLabelledPiece 
5 10 (16) 2 HexBlackLabelledPiece 
4 7 (17) 2 HexWhiteLabelledPiece 
9 2 (18) 2 HexBlackLabelledPiece 
8 2 (19) 2 HexWhiteLabelledPiece 
5 7 (20) 2 HexBlackLabelledPiece 
5 9 (21) 2 HexWhiteLabelledPiece 
4 10 (22) 2 HexBlackLabelledPiece 
7 9 (23) 2 HexWhiteLabelledPiece 
7 10 (24) 2 HexBlackLabelledPiece 
8 9 (25) 2 HexWhiteLabelledPiece 
8 11 (26) 2 HexBlackLabelledPiece 
4 9 (27) 2 HexWhiteLabelledPiece 
2 11 (28) 2 HexBlackLabelledPiece 
8 10 (29) 2 HexWhiteLabelledPiece 
7 11 (30) 2 HexBlackLabelledPiece 
6 10 (31) 2 HexWhiteLabelledPiece 
6 11 (32) 2 HexBlackLabelledPiece 
9 10 (33) 2 HexWhiteLabelledPiece 
9 11 (34) 2 HexBlackLabelledPiece 
3 10 (35) 2 HexWhiteLabelledPiece 
3 11 (36) 2 HexBlackLabelledPiece 
1 11 (37) 2 HexWhiteLabelledPiece 
2 10 (38) 2 HexBlackLabelledPiece 
3 6 (39) 2 HexWhiteLabelledPiece 
2 8 (40) 2 HexBlackLabelledPiece 
2 9 (41) 2 HexWhiteLabelledPiece 
1 10 (42) 2 HexBlackLabelledPiece 
11 10 (43) 2 HexWhiteLabelledPiece 
10 10 (44) 2 HexBlackLabelledPiece 
11 9 (45) 2 HexWhiteLabelledPiece 
10 9 (46) 2 HexBlackLabelledPiece 
11 8 (47) 2 HexWhiteLabelledPiece 
10 8 (48) 2 HexBlackLabelledPiece 
11 7 (49) 2 HexWhiteLabelledPiece 
10 7 (50) 2 HexBlackLabelledPiece 
11 6 (51) 2 HexWhiteLabelledPiece 
10 5 (52) 2 HexBlackLabelledPiece 
10 6 (53) 2 HexWhiteLabelledPiece 
9 7 (54) 2 HexBlackLabelledPiece 
9 6 (55) 2 HexWhiteLabelledPiece 
8 5 (56) 2 HexBlackLabelledPiece 
8 7 (57) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1659 w @beginspecial 0 @llx 0 @lly 175 @urx
108 @ury 2275 @rwi @setspecial
%%BeginDocument: 6d-m.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

2 7 (1) 1 HexBlackLabelledPiece 
2 7 (S) 1 HexBlackLabelledPiece
4 5 (3) 1 HexWhiteLabelledPiece 
6 6 (4) 1 HexBlackLabelledPiece 
3 7 (5) 1 HexWhiteLabelledPiece 
4 6 (6) 1 HexBlackLabelledPiece 
3 6 (7) 1 HexWhiteLabelledPiece 
3 9 (8) 1 HexBlackLabelledPiece 
4 9 (9) 1 HexWhiteLabelledPiece 
4 7 (10) 2 HexBlackLabelledPiece 
2 10 (11) 2 HexWhiteLabelledPiece 
3 8 (12) 2 HexBlackLabelledPiece 
5 7 (13) 2 HexWhiteLabelledPiece 
6 5 (14) 2 HexBlackLabelledPiece 
5 5 (15) 2 HexWhiteLabelledPiece 
5 6 (16) 2 HexBlackLabelledPiece 
10 4 (17) 2 HexWhiteLabelledPiece 
8 8 (18) 2 HexBlackLabelledPiece 
8 7 (19) 2 HexWhiteLabelledPiece 
8 2 (20) 2 HexBlackLabelledPiece 
8 3 (21) 2 HexWhiteLabelledPiece 
9 2 (22) 2 HexBlackLabelledPiece 
9 3 (23) 2 HexWhiteLabelledPiece 
5 1 (24) 2 HexBlackLabelledPiece 
10 2 (25) 2 HexWhiteLabelledPiece 
9 4 (26) 2 HexBlackLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 109 4044 a @beginspecial 0 @llx 0 @lly 175
@urx 108 @ury 2275 @rwi @setspecial
%%BeginDocument: 7e-m.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

10 6 (1) 1 HexBlackLabelledPiece 
10 6 (S) 1 HexBlackLabelledPiece
6 6 (3) 1 HexWhiteLabelledPiece 
6 7 (4) 1 HexBlackLabelledPiece 
3 9 (5) 1 HexWhiteLabelledPiece 
6 5 (6) 1 HexBlackLabelledPiece 
4 7 (7) 1 HexWhiteLabelledPiece 
5 6 (8) 1 HexBlackLabelledPiece 
4 6 (9) 1 HexWhiteLabelledPiece 
5 4 (10) 2 HexBlackLabelledPiece 
6 4 (11) 2 HexWhiteLabelledPiece 
8 2 (12) 2 HexBlackLabelledPiece 
3 5 (13) 2 HexWhiteLabelledPiece 
4 3 (14) 2 HexBlackLabelledPiece 
2 4 (15) 2 HexWhiteLabelledPiece 
3 2 (16) 2 HexBlackLabelledPiece 
5 5 (17) 2 HexWhiteLabelledPiece 
6 3 (18) 2 HexBlackLabelledPiece 
7 3 (19) 2 HexWhiteLabelledPiece 
7 2 (20) 2 HexBlackLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1659 w @beginspecial 0 @llx 0 @lly 175 @urx
108 @ury 2275 @rwi @setspecial
%%BeginDocument: 8d-e.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

2 6 (1) 1 HexBlackLabelledPiece 
6 4 (2) 1 HexWhiteLabelledPiece 
6 5 (3) 1 HexBlackLabelledPiece 
5 5 (4) 1 HexWhiteLabelledPiece 
5 6 (5) 1 HexBlackLabelledPiece 
2 8 (6) 1 HexWhiteLabelledPiece 
8 4 (7) 1 HexBlackLabelledPiece 
3 6 (8) 1 HexWhiteLabelledPiece 
2 9 (9) 1 HexBlackLabelledPiece 
3 8 (10) 2 HexWhiteLabelledPiece 
3 9 (11) 2 HexBlackLabelledPiece 
4 8 (12) 2 HexWhiteLabelledPiece 
4 9 (13) 2 HexBlackLabelledPiece 
5 8 (14) 2 HexWhiteLabelledPiece 
5 9 (15) 2 HexBlackLabelledPiece 
6 8 (16) 2 HexWhiteLabelledPiece 
6 9 (17) 2 HexBlackLabelledPiece 
7 8 (18) 2 HexWhiteLabelledPiece 
7 9 (19) 2 HexBlackLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 109 5281 a @beginspecial 0 @llx 0 @lly 175
@urx 108 @ury 2275 @rwi @setspecial
%%BeginDocument: 9m-d.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

6 1 (1) 1 HexBlackLabelledPiece 
6 1 (S) 1 HexBlackLabelledPiece
5 7 (3) 1 HexWhiteLabelledPiece 
6 5 (4) 1 HexBlackLabelledPiece 
7 5 (5) 1 HexWhiteLabelledPiece 
8 3 (6) 1 HexBlackLabelledPiece 
9 3 (7) 1 HexWhiteLabelledPiece 
8 4 (8) 1 HexBlackLabelledPiece 
9 4 (9) 1 HexWhiteLabelledPiece 
8 5 (10) 2 HexBlackLabelledPiece 
9 5 (11) 2 HexWhiteLabelledPiece 
10 1 (12) 2 HexBlackLabelledPiece 
11 1 (13) 2 HexWhiteLabelledPiece 
10 2 (14) 2 HexBlackLabelledPiece 
6 4 (15) 2 HexWhiteLabelledPiece 
4 6 (16) 2 HexBlackLabelledPiece 
7 4 (17) 2 HexWhiteLabelledPiece 
7 3 (18) 2 HexBlackLabelledPiece 
7 2 (19) 2 HexWhiteLabelledPiece 
4 10 (20) 2 HexBlackLabelledPiece 
8 7 (21) 2 HexWhiteLabelledPiece 
5 10 (22) 2 HexBlackLabelledPiece 
6 10 (23) 2 HexWhiteLabelledPiece 
8 9 (24) 2 HexBlackLabelledPiece 
9 8 (25) 2 HexWhiteLabelledPiece 
9 9 (26) 2 HexBlackLabelledPiece 
10 8 (27) 2 HexWhiteLabelledPiece 
9 2 (28) 2 HexBlackLabelledPiece 
11 2 (29) 2 HexWhiteLabelledPiece 
10 3 (30) 2 HexBlackLabelledPiece 
11 3 (31) 2 HexWhiteLabelledPiece 
10 4 (32) 2 HexBlackLabelledPiece 
11 4 (33) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1659 w @beginspecial 0 @llx 0 @lly 175 @urx
108 @ury 2275 @rwi @setspecial
%%BeginDocument: 10m-e.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

6 1 (1) 1 HexBlackLabelledPiece 
9 3 (2) 1 HexWhiteLabelledPiece 
7 7 (3) 1 HexBlackLabelledPiece 
6 7 (4) 1 HexWhiteLabelledPiece 
7 5 (5) 1 HexBlackLabelledPiece 
8 5 (6) 1 HexWhiteLabelledPiece 
7 6 (7) 1 HexBlackLabelledPiece 
9 6 (8) 1 HexWhiteLabelledPiece 
8 8 (9) 1 HexBlackLabelledPiece 
7 8 (10) 2 HexWhiteLabelledPiece 
8 7 (11) 2 HexBlackLabelledPiece 
10 7 (12) 2 HexWhiteLabelledPiece 
9 9 (13) 2 HexBlackLabelledPiece 
8 9 (14) 2 HexWhiteLabelledPiece 
9 8 (15) 2 HexBlackLabelledPiece 
11 8 (16) 2 HexWhiteLabelledPiece 
10 10 (17) 2 HexBlackLabelledPiece 
4 6 (18) 2 HexWhiteLabelledPiece 
7 2 (19) 2 HexBlackLabelledPiece 
3 4 (20) 2 HexWhiteLabelledPiece 
3 3 (21) 2 HexBlackLabelledPiece 
2 4 (22) 2 HexWhiteLabelledPiece 
2 3 (23) 2 HexBlackLabelledPiece 
9 10 (24) 2 HexWhiteLabelledPiece 
10 6 (25) 2 HexBlackLabelledPiece 
6 2 (26) 2 HexWhiteLabelledPiece 
4 3 (27) 2 HexBlackLabelledPiece 
6 5 (28) 2 HexWhiteLabelledPiece 
7 4 (29) 2 HexBlackLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial eop end
%%Page: 1003 5
TeXDict begin 1003 4 bop 1695 -103 a Fm(ICGA)1625 b(1003)-80
1302 y @beginspecial 0 @llx 0 @lly 175 @urx 108 @ury
2275 @rwi @setspecial
%%BeginDocument: 11e-d.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

10 5 (1) 1 HexBlackLabelledPiece 
8 7 (2) 1 HexWhiteLabelledPiece 
8 6 (3) 1 HexBlackLabelledPiece 
5 6 (4) 1 HexWhiteLabelledPiece 
4 8 (5) 1 HexBlackLabelledPiece 
3 7 (6) 1 HexWhiteLabelledPiece 
6 7 (7) 1 HexBlackLabelledPiece 
9 5 (8) 1 HexWhiteLabelledPiece 
9 6 (9) 1 HexBlackLabelledPiece 
2 9 (10) 2 HexWhiteLabelledPiece 
4 6 (11) 2 HexBlackLabelledPiece 
3 6 (12) 2 HexWhiteLabelledPiece 
2 8 (13) 2 HexBlackLabelledPiece 
3 8 (14) 2 HexWhiteLabelledPiece 
2 10 (15) 2 HexBlackLabelledPiece 
3 9 (16) 2 HexWhiteLabelledPiece 
3 10 (17) 2 HexBlackLabelledPiece 
4 9 (18) 2 HexWhiteLabelledPiece 
4 10 (19) 2 HexBlackLabelledPiece 
7 7 (20) 2 HexWhiteLabelledPiece 
6 9 (21) 2 HexBlackLabelledPiece 
7 9 (22) 2 HexWhiteLabelledPiece 
7 11 (23) 2 HexBlackLabelledPiece 
6 10 (24) 2 HexWhiteLabelledPiece 
8 8 (25) 2 HexBlackLabelledPiece 
5 9 (26) 2 HexWhiteLabelledPiece 
5 10 (27) 2 HexBlackLabelledPiece 
7 8 (28) 2 HexWhiteLabelledPiece 
6 8 (29) 2 HexBlackLabelledPiece 
7 6 (30) 2 HexWhiteLabelledPiece 
8 4 (31) 2 HexBlackLabelledPiece 
6 5 (32) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1659 w @beginspecial 0 @llx 0 @lly 175 @urx
108 @ury 2275 @rwi @setspecial
%%BeginDocument: 12d-m.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

2 5 (1) 1 HexBlackLabelledPiece 
6 6 (2) 1 HexWhiteLabelledPiece 
8 3 (3) 1 HexBlackLabelledPiece 
9 3 (4) 1 HexWhiteLabelledPiece 
6 7 (5) 1 HexBlackLabelledPiece 
5 7 (6) 1 HexWhiteLabelledPiece 
5 8 (7) 1 HexBlackLabelledPiece 
4 8 (8) 1 HexWhiteLabelledPiece 
4 9 (9) 1 HexBlackLabelledPiece 
3 9 (10) 2 HexWhiteLabelledPiece 
8 5 (11) 2 HexBlackLabelledPiece 
2 9 (12) 2 HexWhiteLabelledPiece 
3 11 (13) 2 HexBlackLabelledPiece 
3 10 (14) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial -80 1460 a Fg(11)p Ff(\002)p Fg(11:)23 b(Games)d(5-12.)p
eop end
%%Page: 1004 6
TeXDict begin 1004 5 bop 109 -103 a Fm(1004)1507 b(ICGA)18
b(Journal)1557 b(???)109 1497 y @beginspecial 0 @llx
0 @lly 207 @urx 126 @ury 2691 @rwi @setspecial
%%BeginDocument: 13.01e-m.swap.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 126
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX 13 def
/DimY 13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

8 1 (1) 1 HexBlackLabelledPiece 
8 1 (S) 1 HexBlackLabelledPiece
12 2 (3) 1 HexWhiteLabelledPiece 
8 5 (4) 1 HexBlackLabelledPiece 
11 4 (5) 1 HexWhiteLabelledPiece 
9 6 (6) 1 HexBlackLabelledPiece 
10 6 (7) 1 HexWhiteLabelledPiece 
9 8 (8) 1 HexBlackLabelledPiece 
11 7 (9) 1 HexWhiteLabelledPiece 
10 9 (10) 2 HexBlackLabelledPiece 
5 7 (11) 2 HexWhiteLabelledPiece 
5 8 (12) 2 HexBlackLabelledPiece 
8 8 (13) 2 HexWhiteLabelledPiece 
9 7 (14) 2 HexBlackLabelledPiece 
9 9 (15) 2 HexWhiteLabelledPiece 
10 8 (16) 2 HexBlackLabelledPiece 
8 6 (17) 2 HexWhiteLabelledPiece 
9 5 (18) 2 HexBlackLabelledPiece 
12 8 (19) 2 HexWhiteLabelledPiece 
11 10 (20) 2 HexBlackLabelledPiece 
13 9 (21) 2 HexWhiteLabelledPiece 
12 11 (22) 2 HexBlackLabelledPiece 
4 8 (23) 2 HexWhiteLabelledPiece 
8 9 (24) 2 HexBlackLabelledPiece 
11 11 (25) 2 HexWhiteLabelledPiece 
12 10 (26) 2 HexBlackLabelledPiece 
3 4 (27) 2 HexWhiteLabelledPiece 
4 9 (28) 2 HexBlackLabelledPiece 
7 5 (29) 2 HexWhiteLabelledPiece 
4 10 (30) 2 HexBlackLabelledPiece 
1 11 (31) 2 HexWhiteLabelledPiece 
2 9 (32) 2 HexBlackLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1652 w @beginspecial 0 @llx 0 @lly 207 @urx
126 @ury 2691 @rwi @setspecial
%%BeginDocument: 13.02d-e.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 126
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX 13 def
/DimY 13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

10 1 (1) 1 HexBlackLabelledPiece 
2 12 (2) 1 HexWhiteLabelledPiece 
3 10 (3) 1 HexBlackLabelledPiece 
2 9 (4) 1 HexWhiteLabelledPiece 
2 10 (5) 1 HexBlackLabelledPiece 
7 7 (6) 1 HexWhiteLabelledPiece 
6 9 (7) 1 HexBlackLabelledPiece 
4 10 (8) 1 HexWhiteLabelledPiece 
5 8 (9) 1 HexBlackLabelledPiece 
6 8 (10) 2 HexWhiteLabelledPiece 
5 9 (11) 2 HexBlackLabelledPiece 
4 9 (12) 2 HexWhiteLabelledPiece 
4 8 (13) 2 HexBlackLabelledPiece 
3 9 (14) 2 HexWhiteLabelledPiece 
2 8 (15) 2 HexBlackLabelledPiece 
3 8 (16) 2 HexWhiteLabelledPiece 
4 6 (17) 2 HexBlackLabelledPiece 
4 7 (18) 2 HexWhiteLabelledPiece 
5 6 (19) 2 HexBlackLabelledPiece 
5 7 (20) 2 HexWhiteLabelledPiece 
6 6 (21) 2 HexBlackLabelledPiece 
3 7 (22) 2 HexWhiteLabelledPiece 
3 6 (23) 2 HexBlackLabelledPiece 
2 7 (24) 2 HexWhiteLabelledPiece 
2 6 (25) 2 HexBlackLabelledPiece 
6 7 (26) 2 HexWhiteLabelledPiece 
8 5 (27) 2 HexBlackLabelledPiece 
9 5 (28) 2 HexWhiteLabelledPiece 
9 6 (29) 2 HexBlackLabelledPiece 
8 6 (30) 2 HexWhiteLabelledPiece 
10 3 (31) 2 HexBlackLabelledPiece 
9 4 (32) 2 HexWhiteLabelledPiece 
9 3 (33) 2 HexBlackLabelledPiece 
8 4 (34) 2 HexWhiteLabelledPiece 
8 3 (35) 2 HexBlackLabelledPiece 
7 4 (36) 2 HexWhiteLabelledPiece 
7 3 (37) 2 HexBlackLabelledPiece 
12 5 (38) 2 HexWhiteLabelledPiece 
12 2 (39) 2 HexBlackLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 109 2929 a @beginspecial 0 @llx 0 @lly 207
@urx 126 @ury 2691 @rwi @setspecial
%%BeginDocument: 13.03m-d.swap.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 126
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX 13 def
/DimY 13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

7 1 (1) 1 HexBlackLabelledPiece 
7 1 (S) 1 HexBlackLabelledPiece
5 9 (3) 1 HexWhiteLabelledPiece 
6 7 (4) 1 HexBlackLabelledPiece 
7 7 (5) 1 HexWhiteLabelledPiece 
7 6 (6) 1 HexBlackLabelledPiece 
8 6 (7) 1 HexWhiteLabelledPiece 
8 5 (8) 1 HexBlackLabelledPiece 
9 5 (9) 1 HexWhiteLabelledPiece 
10 3 (10) 2 HexBlackLabelledPiece 
9 4 (11) 2 HexWhiteLabelledPiece 
9 3 (12) 2 HexBlackLabelledPiece 
8 4 (13) 2 HexWhiteLabelledPiece 
8 3 (14) 2 HexBlackLabelledPiece 
11 3 (15) 2 HexWhiteLabelledPiece 
10 4 (16) 2 HexBlackLabelledPiece 
11 4 (17) 2 HexWhiteLabelledPiece 
10 5 (18) 2 HexBlackLabelledPiece 
11 5 (19) 2 HexWhiteLabelledPiece 
10 6 (20) 2 HexBlackLabelledPiece 
11 6 (21) 2 HexWhiteLabelledPiece 
10 7 (22) 2 HexBlackLabelledPiece 
11 7 (23) 2 HexWhiteLabelledPiece 
10 8 (24) 2 HexBlackLabelledPiece 
11 8 (25) 2 HexWhiteLabelledPiece 
10 9 (26) 2 HexBlackLabelledPiece 
11 9 (27) 2 HexWhiteLabelledPiece 
10 11 (28) 2 HexBlackLabelledPiece 
10 10 (29) 2 HexWhiteLabelledPiece 
9 11 (30) 2 HexBlackLabelledPiece 
9 10 (31) 2 HexWhiteLabelledPiece 
8 11 (32) 2 HexBlackLabelledPiece 
8 9 (33) 2 HexWhiteLabelledPiece 
6 11 (34) 2 HexBlackLabelledPiece 
4 11 (35) 2 HexWhiteLabelledPiece 
12 2 (36) 2 HexBlackLabelledPiece 
11 2 (37) 2 HexWhiteLabelledPiece 
8 10 (38) 2 HexBlackLabelledPiece 
9 9 (39) 2 HexWhiteLabelledPiece 
5 10 (40) 2 HexBlackLabelledPiece 
4 10 (41) 2 HexWhiteLabelledPiece 
3 12 (42) 2 HexBlackLabelledPiece 
2 12 (43) 2 HexWhiteLabelledPiece 
3 11 (44) 2 HexBlackLabelledPiece 
4 8 (45) 2 HexWhiteLabelledPiece 
6 9 (46) 2 HexBlackLabelledPiece 
11 12 (47) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1652 w @beginspecial 0 @llx 0 @lly 207 @urx
126 @ury 2691 @rwi @setspecial
%%BeginDocument: 13.04m-e.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 126
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX 13 def
/DimY 13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

7 1 (1) 1 HexBlackLabelledPiece 
11 3 (2) 1 HexWhiteLabelledPiece 
8 9 (3) 1 HexBlackLabelledPiece 
11 7 (4) 1 HexWhiteLabelledPiece 
6 8 (5) 1 HexBlackLabelledPiece 
10 5 (6) 1 HexWhiteLabelledPiece 
9 10 (7) 1 HexBlackLabelledPiece 
6 10 (8) 1 HexWhiteLabelledPiece 
7 8 (9) 1 HexBlackLabelledPiece 
7 9 (10) 2 HexWhiteLabelledPiece 
8 8 (11) 2 HexBlackLabelledPiece 
10 10 (12) 2 HexWhiteLabelledPiece 
10 6 (13) 2 HexBlackLabelledPiece 
10 9 (14) 2 HexWhiteLabelledPiece 
11 5 (15) 2 HexBlackLabelledPiece 
12 5 (16) 2 HexWhiteLabelledPiece 
12 4 (17) 2 HexBlackLabelledPiece 
4 9 (18) 2 HexWhiteLabelledPiece 
3 11 (19) 2 HexBlackLabelledPiece 
5 9 (20) 2 HexWhiteLabelledPiece 
5 10 (21) 2 HexBlackLabelledPiece 
6 9 (22) 2 HexWhiteLabelledPiece 
5 7 (23) 2 HexBlackLabelledPiece 
6 7 (24) 2 HexWhiteLabelledPiece 
5 8 (25) 2 HexBlackLabelledPiece 
4 7 (26) 2 HexWhiteLabelledPiece 
4 5 (27) 2 HexBlackLabelledPiece 
3 6 (28) 2 HexWhiteLabelledPiece 
4 8 (29) 2 HexBlackLabelledPiece 
2 9 (30) 2 HexWhiteLabelledPiece 
3 4 (31) 2 HexBlackLabelledPiece 
4 4 (32) 2 HexWhiteLabelledPiece 
3 5 (33) 2 HexBlackLabelledPiece 
5 5 (34) 2 HexWhiteLabelledPiece 
3 8 (35) 2 HexBlackLabelledPiece 
3 13 (36) 2 HexWhiteLabelledPiece 
2 8 (37) 2 HexBlackLabelledPiece 
4 6 (38) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 109 4360 a @beginspecial 0 @llx 0 @lly 207
@urx 126 @ury 2691 @rwi @setspecial
%%BeginDocument: 13.05e-d.swap.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 126
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX 13 def
/DimY 13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

3 13 (1) 1 HexBlackLabelledPiece 
3 13 (S) 1 HexBlackLabelledPiece
2 12 (3) 1 HexWhiteLabelledPiece 
3 11 (4) 1 HexBlackLabelledPiece 
2 9 (5) 1 HexWhiteLabelledPiece 
2 11 (6) 1 HexBlackLabelledPiece 
4 11 (7) 1 HexWhiteLabelledPiece 
5 9 (8) 1 HexBlackLabelledPiece 
4 10 (9) 1 HexWhiteLabelledPiece 
3 9 (10) 2 HexBlackLabelledPiece 
4 9 (11) 2 HexWhiteLabelledPiece 
4 8 (12) 2 HexBlackLabelledPiece 
5 8 (13) 2 HexWhiteLabelledPiece 
6 6 (14) 2 HexBlackLabelledPiece 
7 6 (15) 2 HexWhiteLabelledPiece 
8 4 (16) 2 HexBlackLabelledPiece 
9 4 (17) 2 HexWhiteLabelledPiece 
3 12 (18) 2 HexBlackLabelledPiece 
5 12 (19) 2 HexWhiteLabelledPiece 
6 7 (20) 2 HexBlackLabelledPiece 
10 4 (21) 2 HexWhiteLabelledPiece 
7 8 (22) 2 HexBlackLabelledPiece 
7 7 (23) 2 HexWhiteLabelledPiece 
6 8 (24) 2 HexBlackLabelledPiece 
5 7 (25) 2 HexWhiteLabelledPiece 
5 6 (26) 2 HexBlackLabelledPiece 
4 7 (27) 2 HexWhiteLabelledPiece 
4 5 (28) 2 HexBlackLabelledPiece 
2 6 (29) 2 HexWhiteLabelledPiece 
9 7 (30) 2 HexBlackLabelledPiece 
8 7 (31) 2 HexWhiteLabelledPiece 
8 8 (32) 2 HexBlackLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1652 w @beginspecial 0 @llx 0 @lly 207 @urx
126 @ury 2691 @rwi @setspecial
%%BeginDocument: 13.06d-m.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 126
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX 13 def
/DimY 13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

2 10 (1) 1 HexBlackLabelledPiece 
8 7 (2) 1 HexWhiteLabelledPiece 
10 4 (3) 1 HexBlackLabelledPiece 
7 5 (4) 1 HexWhiteLabelledPiece 
8 6 (5) 1 HexBlackLabelledPiece 
6 7 (6) 1 HexWhiteLabelledPiece 
7 7 (7) 1 HexBlackLabelledPiece 
6 8 (8) 1 HexWhiteLabelledPiece 
5 10 (9) 1 HexBlackLabelledPiece 
7 9 (10) 2 HexWhiteLabelledPiece 
8 4 (11) 2 HexBlackLabelledPiece 
7 4 (12) 2 HexWhiteLabelledPiece 
8 3 (13) 2 HexBlackLabelledPiece 
7 3 (14) 2 HexWhiteLabelledPiece 
6 6 (15) 2 HexBlackLabelledPiece 
7 6 (16) 2 HexWhiteLabelledPiece 
7 8 (17) 2 HexBlackLabelledPiece 
6 9 (18) 2 HexWhiteLabelledPiece 
7 10 (19) 2 HexBlackLabelledPiece 
6 10 (20) 2 HexWhiteLabelledPiece 
8 1 (21) 2 HexBlackLabelledPiece 
8 2 (22) 2 HexWhiteLabelledPiece 
9 1 (23) 2 HexBlackLabelledPiece 
9 2 (24) 2 HexWhiteLabelledPiece 
5 12 (25) 2 HexBlackLabelledPiece 
2 12 (26) 2 HexWhiteLabelledPiece 
10 1 (27) 2 HexBlackLabelledPiece 
10 2 (28) 2 HexWhiteLabelledPiece 
11 1 (29) 2 HexBlackLabelledPiece 
6 2 (30) 2 HexWhiteLabelledPiece 
6 3 (31) 2 HexBlackLabelledPiece 
12 2 (32) 2 HexWhiteLabelledPiece 
4 11 (33) 2 HexBlackLabelledPiece 
3 10 (34) 2 HexWhiteLabelledPiece 
4 9 (35) 2 HexBlackLabelledPiece 
6 11 (36) 2 HexWhiteLabelledPiece 
6 12 (37) 2 HexBlackLabelledPiece 
3 9 (38) 2 HexWhiteLabelledPiece 
5 7 (39) 2 HexBlackLabelledPiece 
4 6 (40) 2 HexWhiteLabelledPiece 
5 5 (41) 2 HexBlackLabelledPiece 
10 9 (42) 2 HexWhiteLabelledPiece 
9 9 (43) 2 HexBlackLabelledPiece 
10 8 (44) 2 HexWhiteLabelledPiece 
8 11 (45) 2 HexBlackLabelledPiece 
9 10 (46) 2 HexWhiteLabelledPiece 
10 11 (47) 2 HexBlackLabelledPiece 
9 11 (48) 2 HexWhiteLabelledPiece 
9 8 (49) 2 HexBlackLabelledPiece 
10 7 (50) 2 HexWhiteLabelledPiece 
8 13 (51) 2 HexBlackLabelledPiece 
9 12 (52) 2 HexWhiteLabelledPiece 
7 11 (53) 2 HexBlackLabelledPiece 
9 6 (54) 2 HexWhiteLabelledPiece 
9 13 (55) 2 HexBlackLabelledPiece 
10 12 (56) 2 HexWhiteLabelledPiece 
10 13 (57) 2 HexBlackLabelledPiece 
11 12 (58) 2 HexWhiteLabelledPiece 
11 13 (59) 2 HexBlackLabelledPiece 
13 12 (60) 2 HexWhiteLabelledPiece 
12 12 (61) 2 HexBlackLabelledPiece 
13 11 (62) 2 HexWhiteLabelledPiece 
12 11 (63) 2 HexBlackLabelledPiece 
13 10 (64) 2 HexWhiteLabelledPiece 
12 10 (65) 2 HexBlackLabelledPiece 
13 9 (66) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 109 5792 a @beginspecial 0 @llx 0 @lly 207
@urx 126 @ury 2691 @rwi @setspecial
%%BeginDocument: 13.07e-m.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 126
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX 13 def
/DimY 13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

8 13 (1) 1 HexBlackLabelledPiece 
8 6 (2) 1 HexWhiteLabelledPiece 
12 2 (3) 1 HexBlackLabelledPiece 
10 3 (4) 1 HexWhiteLabelledPiece 
11 1 (5) 1 HexBlackLabelledPiece 
9 2 (6) 1 HexWhiteLabelledPiece 
9 3 (7) 1 HexBlackLabelledPiece 
10 2 (8) 1 HexWhiteLabelledPiece 
7 4 (9) 1 HexBlackLabelledPiece 
9 4 (10) 2 HexWhiteLabelledPiece 
8 5 (11) 2 HexBlackLabelledPiece 
9 5 (12) 2 HexWhiteLabelledPiece 
9 7 (13) 2 HexBlackLabelledPiece 
7 8 (14) 2 HexWhiteLabelledPiece 
7 7 (15) 2 HexBlackLabelledPiece 
8 7 (16) 2 HexWhiteLabelledPiece 
6 9 (17) 2 HexBlackLabelledPiece 
7 9 (18) 2 HexWhiteLabelledPiece 
6 10 (19) 2 HexBlackLabelledPiece 
7 10 (20) 2 HexWhiteLabelledPiece 
6 13 (21) 2 HexBlackLabelledPiece 
10 12 (22) 2 HexWhiteLabelledPiece 
7 12 (23) 2 HexBlackLabelledPiece 
4 10 (24) 2 HexWhiteLabelledPiece 
6 11 (25) 2 HexBlackLabelledPiece 
5 8 (26) 2 HexWhiteLabelledPiece 
6 8 (27) 2 HexBlackLabelledPiece 
7 6 (28) 2 HexWhiteLabelledPiece 
6 7 (29) 2 HexBlackLabelledPiece 
4 7 (30) 2 HexWhiteLabelledPiece 
5 6 (31) 2 HexBlackLabelledPiece 
4 6 (32) 2 HexWhiteLabelledPiece 
5 5 (33) 2 HexBlackLabelledPiece 
5 7 (34) 2 HexWhiteLabelledPiece 
6 6 (35) 2 HexBlackLabelledPiece 
4 5 (36) 2 HexWhiteLabelledPiece 
9 12 (37) 2 HexBlackLabelledPiece 
3 12 (38) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1652 w @beginspecial 0 @llx 0 @lly 207 @urx
126 @ury 2691 @rwi @setspecial
%%BeginDocument: 13.08d-e.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 126
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX 13 def
/DimY 13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

11 1 (1) 1 HexBlackLabelledPiece 
12 2 (2) 1 HexWhiteLabelledPiece 
11 3 (3) 1 HexBlackLabelledPiece 
12 3 (4) 1 HexWhiteLabelledPiece 
11 4 (5) 1 HexBlackLabelledPiece 
12 4 (6) 1 HexWhiteLabelledPiece 
11 6 (7) 1 HexBlackLabelledPiece 
13 5 (8) 1 HexWhiteLabelledPiece 
12 7 (9) 1 HexBlackLabelledPiece 
11 5 (10) 2 HexWhiteLabelledPiece 
10 6 (11) 2 HexBlackLabelledPiece 
11 7 (12) 2 HexWhiteLabelledPiece 
12 6 (13) 2 HexBlackLabelledPiece 
9 5 (14) 2 HexWhiteLabelledPiece 
8 7 (15) 2 HexBlackLabelledPiece 
9 7 (16) 2 HexWhiteLabelledPiece 
9 6 (17) 2 HexBlackLabelledPiece 
7 6 (18) 2 HexWhiteLabelledPiece 
6 8 (19) 2 HexBlackLabelledPiece 
7 7 (20) 2 HexWhiteLabelledPiece 
7 8 (21) 2 HexBlackLabelledPiece 
3 11 (22) 2 HexWhiteLabelledPiece 
5 7 (23) 2 HexBlackLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial eop end
%%Page: 1005 7
TeXDict begin 1005 6 bop 1695 -103 a Fm(ICGA)1625 b(1005)-80
1497 y @beginspecial 0 @llx 0 @lly 207 @urx 126 @ury
2691 @rwi @setspecial
%%BeginDocument: 13.09m-d.swap.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 126
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX 13 def
/DimY 13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

7 1 (1) 1 HexBlackLabelledPiece 
7 1 (S) 1 HexBlackLabelledPiece
5 9 (3) 1 HexWhiteLabelledPiece 
6 7 (4) 1 HexBlackLabelledPiece 
4 8 (5) 1 HexWhiteLabelledPiece 
5 6 (6) 1 HexBlackLabelledPiece 
7 7 (7) 1 HexWhiteLabelledPiece 
7 6 (8) 1 HexBlackLabelledPiece 
8 6 (9) 1 HexWhiteLabelledPiece 
8 5 (10) 2 HexBlackLabelledPiece 
9 5 (11) 2 HexWhiteLabelledPiece 
10 3 (12) 2 HexBlackLabelledPiece 
9 4 (13) 2 HexWhiteLabelledPiece 
9 3 (14) 2 HexBlackLabelledPiece 
8 4 (15) 2 HexWhiteLabelledPiece 
8 3 (16) 2 HexBlackLabelledPiece 
11 3 (17) 2 HexWhiteLabelledPiece 
10 4 (18) 2 HexBlackLabelledPiece 
11 4 (19) 2 HexWhiteLabelledPiece 
10 5 (20) 2 HexBlackLabelledPiece 
11 5 (21) 2 HexWhiteLabelledPiece 
10 6 (22) 2 HexBlackLabelledPiece 
11 6 (23) 2 HexWhiteLabelledPiece 
10 7 (24) 2 HexBlackLabelledPiece 
11 7 (25) 2 HexWhiteLabelledPiece 
10 8 (26) 2 HexBlackLabelledPiece 
11 8 (27) 2 HexWhiteLabelledPiece 
10 9 (28) 2 HexBlackLabelledPiece 
11 9 (29) 2 HexWhiteLabelledPiece 
10 10 (30) 2 HexBlackLabelledPiece 
11 10 (31) 2 HexWhiteLabelledPiece 
10 11 (32) 2 HexBlackLabelledPiece 
11 11 (33) 2 HexWhiteLabelledPiece 
12 1 (34) 2 HexBlackLabelledPiece 
13 1 (35) 2 HexWhiteLabelledPiece 
12 2 (36) 2 HexBlackLabelledPiece 
11 2 (37) 2 HexWhiteLabelledPiece 
11 1 (38) 2 HexBlackLabelledPiece 
13 2 (39) 2 HexWhiteLabelledPiece 
12 3 (40) 2 HexBlackLabelledPiece 
13 3 (41) 2 HexWhiteLabelledPiece 
12 11 (42) 2 HexBlackLabelledPiece 
12 4 (43) 2 HexWhiteLabelledPiece 
10 13 (44) 2 HexBlackLabelledPiece 
10 12 (45) 2 HexWhiteLabelledPiece 
9 13 (46) 2 HexBlackLabelledPiece 
9 12 (47) 2 HexWhiteLabelledPiece 
8 13 (48) 2 HexBlackLabelledPiece 
8 12 (49) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1652 w @beginspecial 0 @llx 0 @lly 207 @urx
126 @ury 2691 @rwi @setspecial
%%BeginDocument: 13.10m-e.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 126
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX 13 def
/DimY 13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

7 1 (1) 1 HexBlackLabelledPiece 
11 3 (2) 1 HexWhiteLabelledPiece 
8 9 (3) 1 HexBlackLabelledPiece 
11 7 (4) 1 HexWhiteLabelledPiece 
11 6 (5) 1 HexBlackLabelledPiece 
10 6 (6) 1 HexWhiteLabelledPiece 
10 5 (7) 1 HexBlackLabelledPiece 
12 4 (8) 1 HexWhiteLabelledPiece 
12 1 (9) 1 HexBlackLabelledPiece 
12 7 (10) 2 HexWhiteLabelledPiece 
10 2 (11) 2 HexBlackLabelledPiece 
10 13 (12) 2 HexWhiteLabelledPiece 
10 7 (13) 2 HexBlackLabelledPiece 
9 4 (14) 2 HexWhiteLabelledPiece 
13 1 (15) 2 HexBlackLabelledPiece 
12 3 (16) 2 HexWhiteLabelledPiece 
11 4 (17) 2 HexBlackLabelledPiece 
12 2 (18) 2 HexWhiteLabelledPiece 
8 4 (19) 2 HexBlackLabelledPiece 
8 5 (20) 2 HexWhiteLabelledPiece 
9 3 (21) 2 HexBlackLabelledPiece 
10 3 (22) 2 HexWhiteLabelledPiece 
11 9 (23) 2 HexBlackLabelledPiece 
9 2 (24) 2 HexWhiteLabelledPiece 
3 10 (25) 2 HexBlackLabelledPiece 
3 9 (26) 2 HexWhiteLabelledPiece 
3 9 (S) 1 HexBlackLabelledPiece
6 7 (28) 2 HexBlackLabelledPiece 
6 6 (29) 2 HexWhiteLabelledPiece 
7 6 (30) 2 HexBlackLabelledPiece 
7 5 (31) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial -80 2929 a @beginspecial 0 @llx 0 @lly 207
@urx 126 @ury 2691 @rwi @setspecial
%%BeginDocument: 13.11e-d.swap.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 126
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX 13 def
/DimY 13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

4 1 (1) 1 HexBlackLabelledPiece 
4 1 (S) 1 HexBlackLabelledPiece
3 11 (3) 1 HexWhiteLabelledPiece 
5 8 (4) 1 HexBlackLabelledPiece 
4 8 (5) 1 HexWhiteLabelledPiece 
3 10 (6) 1 HexBlackLabelledPiece 
6 8 (7) 1 HexWhiteLabelledPiece 
4 10 (8) 1 HexBlackLabelledPiece 
5 10 (9) 1 HexWhiteLabelledPiece 
7 6 (10) 2 HexBlackLabelledPiece 
6 7 (11) 2 HexWhiteLabelledPiece 
6 6 (12) 2 HexBlackLabelledPiece 
5 7 (13) 2 HexWhiteLabelledPiece 
5 5 (14) 2 HexBlackLabelledPiece 
5 6 (15) 2 HexWhiteLabelledPiece 
6 5 (16) 2 HexBlackLabelledPiece 
3 6 (17) 2 HexWhiteLabelledPiece 
4 4 (18) 2 HexBlackLabelledPiece 
5 4 (19) 2 HexWhiteLabelledPiece 
4 5 (20) 2 HexBlackLabelledPiece 
2 5 (21) 2 HexWhiteLabelledPiece 
3 3 (22) 2 HexBlackLabelledPiece 
1 4 (23) 2 HexWhiteLabelledPiece 
2 2 (24) 2 HexBlackLabelledPiece 
2 3 (25) 2 HexWhiteLabelledPiece 
4 2 (26) 2 HexBlackLabelledPiece 
3 2 (27) 2 HexWhiteLabelledPiece 
4 11 (28) 2 HexBlackLabelledPiece 
3 1 (29) 2 HexWhiteLabelledPiece 
2 6 (30) 2 HexBlackLabelledPiece 
3 5 (31) 2 HexWhiteLabelledPiece 
5 12 (32) 2 HexBlackLabelledPiece 
5 11 (33) 2 HexWhiteLabelledPiece 
4 12 (34) 2 HexBlackLabelledPiece 
8 7 (35) 2 HexWhiteLabelledPiece 
7 11 (36) 2 HexBlackLabelledPiece 
6 11 (37) 2 HexWhiteLabelledPiece 
6 12 (38) 2 HexBlackLabelledPiece 
8 10 (39) 2 HexWhiteLabelledPiece 
8 11 (40) 2 HexBlackLabelledPiece 
11 10 (41) 2 HexWhiteLabelledPiece 
9 10 (42) 2 HexBlackLabelledPiece 
10 9 (43) 2 HexWhiteLabelledPiece 
9 8 (44) 2 HexBlackLabelledPiece 
9 9 (45) 2 HexWhiteLabelledPiece 
10 13 (46) 2 HexBlackLabelledPiece 
10 10 (47) 2 HexWhiteLabelledPiece 
7 10 (48) 2 HexBlackLabelledPiece 
11 7 (49) 2 HexWhiteLabelledPiece 
9 12 (50) 2 HexBlackLabelledPiece 
9 11 (51) 2 HexWhiteLabelledPiece 
8 12 (52) 2 HexBlackLabelledPiece 
10 12 (53) 2 HexWhiteLabelledPiece 
9 13 (54) 2 HexBlackLabelledPiece 
11 12 (55) 2 HexWhiteLabelledPiece 
11 13 (56) 2 HexBlackLabelledPiece 
13 12 (57) 2 HexWhiteLabelledPiece 
12 12 (58) 2 HexBlackLabelledPiece 
13 11 (59) 2 HexWhiteLabelledPiece 
12 11 (60) 2 HexBlackLabelledPiece 
13 10 (61) 2 HexWhiteLabelledPiece 
12 10 (62) 2 HexBlackLabelledPiece 
13 9 (63) 2 HexWhiteLabelledPiece 
12 9 (64) 2 HexBlackLabelledPiece 
13 8 (65) 2 HexWhiteLabelledPiece 
12 7 (66) 2 HexBlackLabelledPiece 
2 11 (67) 2 HexWhiteLabelledPiece 
2 10 (68) 2 HexBlackLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1652 w @beginspecial 0 @llx 0 @lly 207 @urx
126 @ury 2691 @rwi @setspecial
%%BeginDocument: 13.12d-m.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 126
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX 13 def
/DimY 13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

2 4 (1) 1 HexBlackLabelledPiece 
9 5 (2) 1 HexWhiteLabelledPiece 
8 7 (3) 1 HexBlackLabelledPiece 
9 7 (4) 1 HexWhiteLabelledPiece 
9 6 (5) 1 HexBlackLabelledPiece 
7 7 (6) 1 HexWhiteLabelledPiece 
8 6 (7) 1 HexBlackLabelledPiece 
7 6 (8) 1 HexWhiteLabelledPiece 
8 5 (9) 1 HexBlackLabelledPiece 
7 5 (10) 2 HexWhiteLabelledPiece 
7 8 (11) 2 HexBlackLabelledPiece 
6 8 (12) 2 HexWhiteLabelledPiece 
6 9 (13) 2 HexBlackLabelledPiece 
5 9 (14) 2 HexWhiteLabelledPiece 
5 10 (15) 2 HexBlackLabelledPiece 
4 10 (16) 2 HexWhiteLabelledPiece 
4 11 (17) 2 HexBlackLabelledPiece 
3 11 (18) 2 HexWhiteLabelledPiece 
2 13 (19) 2 HexBlackLabelledPiece 
3 12 (20) 2 HexWhiteLabelledPiece 
3 13 (21) 2 HexBlackLabelledPiece 
4 12 (22) 2 HexWhiteLabelledPiece 
4 13 (23) 2 HexBlackLabelledPiece 
10 5 (24) 2 HexWhiteLabelledPiece 
5 12 (25) 2 HexBlackLabelledPiece 
10 6 (26) 2 HexWhiteLabelledPiece 
8 9 (27) 2 HexBlackLabelledPiece 
11 8 (28) 2 HexWhiteLabelledPiece 
10 8 (29) 2 HexBlackLabelledPiece 
11 7 (30) 2 HexWhiteLabelledPiece 
10 10 (31) 2 HexBlackLabelledPiece 
6 11 (32) 2 HexWhiteLabelledPiece 
5 11 (33) 2 HexBlackLabelledPiece 
1 11 (34) 2 HexWhiteLabelledPiece 
1 12 (35) 2 HexBlackLabelledPiece 
11 10 (36) 2 HexWhiteLabelledPiece 
11 9 (37) 2 HexBlackLabelledPiece 
13 8 (38) 2 HexWhiteLabelledPiece 
10 11 (39) 2 HexBlackLabelledPiece 
11 11 (40) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial -80 3087 a Fg(13)p Ff(\002)p Fg(13:)23 b(Games)d(1-12.)-80
4676 y @beginspecial 0 @llx 0 @lly 207 @urx 126 @ury
2691 @rwi @setspecial
%%BeginDocument: 13.p01m-d.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 126
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX 13 def
/DimY 13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

7 1 (1) 1 HexBlackLabelledPiece 
12 8 (2) 1 HexWhiteLabelledPiece 
11 3 (3) 1 HexBlackLabelledPiece 
9 4 (4) 1 HexWhiteLabelledPiece 
10 2 (5) 1 HexBlackLabelledPiece 
8 3 (6) 1 HexWhiteLabelledPiece 
9 1 (7) 1 HexBlackLabelledPiece 
7 2 (8) 1 HexWhiteLabelledPiece 
9 5 (9) 1 HexBlackLabelledPiece 
7 6 (10) 2 HexWhiteLabelledPiece 
7 7 (11) 2 HexBlackLabelledPiece 
8 6 (12) 2 HexWhiteLabelledPiece 
7 3 (13) 2 HexBlackLabelledPiece 
8 2 (14) 2 HexWhiteLabelledPiece 
7 4 (15) 2 HexBlackLabelledPiece 
8 5 (16) 2 HexWhiteLabelledPiece 
8 1 (17) 2 HexBlackLabelledPiece 
5 2 (18) 2 HexWhiteLabelledPiece 
6 2 (19) 2 HexBlackLabelledPiece 
5 4 (20) 2 HexWhiteLabelledPiece 
5 3 (21) 2 HexBlackLabelledPiece 
3 4 (22) 2 HexWhiteLabelledPiece 
4 10 (23) 2 HexBlackLabelledPiece 
4 4 (24) 2 HexWhiteLabelledPiece 
8 7 (25) 2 HexBlackLabelledPiece 
9 6 (26) 2 HexWhiteLabelledPiece 
9 7 (27) 2 HexBlackLabelledPiece 
11 6 (28) 2 HexWhiteLabelledPiece 
10 8 (29) 2 HexBlackLabelledPiece 
12 7 (30) 2 HexWhiteLabelledPiece 
12 6 (31) 2 HexBlackLabelledPiece 
11 7 (32) 2 HexWhiteLabelledPiece 
11 9 (33) 2 HexBlackLabelledPiece 
12 9 (34) 2 HexWhiteLabelledPiece 
10 6 (35) 2 HexBlackLabelledPiece 
11 5 (36) 2 HexWhiteLabelledPiece 
10 5 (37) 2 HexBlackLabelledPiece 
2 11 (38) 2 HexWhiteLabelledPiece 
4 3 (39) 2 HexBlackLabelledPiece 
2 3 (40) 2 HexWhiteLabelledPiece 
2 12 (41) 2 HexBlackLabelledPiece 
3 11 (42) 2 HexWhiteLabelledPiece 
4 11 (43) 2 HexBlackLabelledPiece 
6 8 (44) 2 HexWhiteLabelledPiece 
5 8 (45) 2 HexBlackLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1652 w @beginspecial 0 @llx 0 @lly 207 @urx
126 @ury 2691 @rwi @setspecial
%%BeginDocument: 13.p02d-m.swap.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 126
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX 13 def
/DimY 13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

2 10 (1) 1 HexBlackLabelledPiece 
2 10 (S) 1 HexBlackLabelledPiece
3 4 (3) 1 HexWhiteLabelledPiece 
8 6 (4) 1 HexBlackLabelledPiece 
10 5 (5) 1 HexWhiteLabelledPiece 
9 7 (6) 1 HexBlackLabelledPiece 
11 6 (7) 1 HexWhiteLabelledPiece 
10 8 (8) 1 HexBlackLabelledPiece 
12 7 (9) 1 HexWhiteLabelledPiece 
11 9 (10) 2 HexBlackLabelledPiece 
5 8 (11) 2 HexWhiteLabelledPiece 
6 5 (12) 2 HexBlackLabelledPiece 
4 10 (13) 2 HexWhiteLabelledPiece 
5 7 (14) 2 HexBlackLabelledPiece 
3 8 (15) 2 HexWhiteLabelledPiece 
4 9 (16) 2 HexBlackLabelledPiece 
4 8 (17) 2 HexWhiteLabelledPiece 
3 7 (18) 2 HexBlackLabelledPiece 
5 6 (19) 2 HexWhiteLabelledPiece 
4 7 (20) 2 HexBlackLabelledPiece 
2 7 (21) 2 HexWhiteLabelledPiece 
3 6 (22) 2 HexBlackLabelledPiece 
9 8 (23) 2 HexWhiteLabelledPiece 
9 4 (24) 2 HexBlackLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial -80 4833 a(13)p Ff(\002)p Fg(13:)j(Play)n(off)18
b(games.)27 b Fh(M)t Fe(O)t Fh(H)t Fe(E)t(X)r Fg(-)r
Fh(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)21 b Fg(1-0,)g
Fh(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)r Fg(-)r Fh(M)t
Fe(O)t Fh(H)t Fe(E)t(X)h Fg(0-1.)p eop end
%%Page: 1006 8
TeXDict begin 1006 7 bop 109 -103 a Fm(1006)1507 b(ICGA)18
b(Journal)1557 b(???)109 1302 y @beginspecial 0 @llx
0 @lly 175 @urx 108 @ury 2275 @rwi @setspecial
%%BeginDocument: m-tony.swap.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

2 1 (1) 1 HexBlackLabelledPiece 
2 1 (S) 1 HexBlackLabelledPiece
6 6 (3) 1 HexWhiteLabelledPiece 
8 4 (4) 1 HexBlackLabelledPiece 
7 4 (5) 1 HexWhiteLabelledPiece 
8 3 (6) 1 HexBlackLabelledPiece 
7 3 (7) 1 HexWhiteLabelledPiece 
7 5 (8) 1 HexBlackLabelledPiece 
6 5 (9) 1 HexWhiteLabelledPiece 
5 8 (10) 2 HexBlackLabelledPiece 
7 7 (11) 2 HexWhiteLabelledPiece 
7 8 (12) 2 HexBlackLabelledPiece 
6 8 (13) 2 HexWhiteLabelledPiece 
5 10 (14) 2 HexBlackLabelledPiece 
4 8 (15) 2 HexWhiteLabelledPiece 
4 9 (16) 2 HexBlackLabelledPiece 
4 10 (17) 2 HexWhiteLabelledPiece 
5 9 (18) 2 HexBlackLabelledPiece 
3 9 (19) 2 HexWhiteLabelledPiece 
5 7 (20) 2 HexBlackLabelledPiece 
4 7 (21) 2 HexWhiteLabelledPiece 
6 2 (22) 2 HexBlackLabelledPiece 
5 6 (23) 2 HexWhiteLabelledPiece 
8 1 (24) 2 HexBlackLabelledPiece 
4 3 (25) 2 HexWhiteLabelledPiece 
5 4 (26) 2 HexBlackLabelledPiece 
3 5 (27) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1423 w @beginspecial 0 @llx 0 @lly 175 @urx
108 @ury 2275 @rwi @setspecial
%%BeginDocument: tony-m.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

2 6 (1) 1 HexBlackLabelledPiece 
7 5 (2) 1 HexWhiteLabelledPiece 
8 3 (3) 1 HexBlackLabelledPiece 
6 4 (4) 1 HexWhiteLabelledPiece 
6 5 (5) 1 HexBlackLabelledPiece 
4 6 (6) 1 HexWhiteLabelledPiece 
4 7 (7) 1 HexBlackLabelledPiece 
5 7 (8) 1 HexWhiteLabelledPiece 
4 9 (9) 1 HexBlackLabelledPiece 
6 8 (10) 2 HexWhiteLabelledPiece 
5 10 (11) 2 HexBlackLabelledPiece 
7 9 (12) 2 HexWhiteLabelledPiece 
7 8 (13) 2 HexBlackLabelledPiece 
6 9 (14) 2 HexWhiteLabelledPiece 
8 9 (15) 2 HexBlackLabelledPiece 
9 10 (16) 2 HexWhiteLabelledPiece 
7 4 (17) 2 HexBlackLabelledPiece 
5 6 (18) 2 HexWhiteLabelledPiece 
5 3 (19) 2 HexBlackLabelledPiece 
4 5 (20) 2 HexWhiteLabelledPiece 
7 2 (21) 2 HexBlackLabelledPiece 
6 2 (22) 2 HexWhiteLabelledPiece 
6 3 (23) 2 HexBlackLabelledPiece 
3 4 (24) 2 HexWhiteLabelledPiece 
4 2 (25) 2 HexBlackLabelledPiece 
2 3 (26) 2 HexWhiteLabelledPiece 
3 1 (27) 2 HexBlackLabelledPiece 
1 2 (28) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 109 2539 a @beginspecial 0 @llx 0 @lly 175
@urx 108 @ury 2275 @rwi @setspecial
%%BeginDocument: d-tony.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

2 7 (1) 1 HexBlackLabelledPiece 
4 6 (2) 1 HexWhiteLabelledPiece 
5 8 (3) 1 HexBlackLabelledPiece 
2 10 (4) 1 HexWhiteLabelledPiece 
7 7 (5) 1 HexBlackLabelledPiece 
3 8 (6) 1 HexWhiteLabelledPiece 
3 9 (7) 1 HexBlackLabelledPiece 
2 9 (8) 1 HexWhiteLabelledPiece 
4 7 (9) 1 HexBlackLabelledPiece 
8 7 (10) 2 HexWhiteLabelledPiece 
3 7 (11) 2 HexBlackLabelledPiece 
8 6 (12) 2 HexWhiteLabelledPiece 
7 6 (13) 2 HexBlackLabelledPiece 
8 4 (14) 2 HexWhiteLabelledPiece 
8 5 (15) 2 HexBlackLabelledPiece 
10 4 (16) 2 HexWhiteLabelledPiece 
9 5 (17) 2 HexBlackLabelledPiece 
10 5 (18) 2 HexWhiteLabelledPiece 
9 6 (19) 2 HexBlackLabelledPiece 
10 6 (20) 2 HexWhiteLabelledPiece 
9 7 (21) 2 HexBlackLabelledPiece 
10 7 (22) 2 HexWhiteLabelledPiece 
9 9 (23) 2 HexBlackLabelledPiece 
5 7 (24) 2 HexWhiteLabelledPiece 
9 8 (25) 2 HexBlackLabelledPiece 
4 8 (26) 2 HexWhiteLabelledPiece 
6 5 (27) 2 HexBlackLabelledPiece 
5 6 (28) 2 HexWhiteLabelledPiece 
5 4 (29) 2 HexBlackLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1423 w @beginspecial 0 @llx 0 @lly 175 @urx
108 @ury 2275 @rwi @setspecial
%%BeginDocument: tony-d.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

2 6 (1) 1 HexBlackLabelledPiece 
9 8 (2) 1 HexWhiteLabelledPiece 
9 10 (3) 1 HexBlackLabelledPiece 
7 7 (4) 1 HexWhiteLabelledPiece 
7 5 (5) 1 HexBlackLabelledPiece 
8 4 (6) 1 HexWhiteLabelledPiece 
7 4 (7) 1 HexBlackLabelledPiece 
8 3 (8) 1 HexWhiteLabelledPiece 
8 5 (9) 1 HexBlackLabelledPiece 
9 4 (10) 2 HexWhiteLabelledPiece 
9 5 (11) 2 HexBlackLabelledPiece 
4 6 (12) 2 HexWhiteLabelledPiece 
5 6 (13) 2 HexBlackLabelledPiece 
11 4 (14) 2 HexWhiteLabelledPiece 
10 6 (15) 2 HexBlackLabelledPiece 
9 6 (16) 2 HexWhiteLabelledPiece 
10 5 (17) 2 HexBlackLabelledPiece 
3 6 (18) 2 HexWhiteLabelledPiece 
3 8 (19) 2 HexBlackLabelledPiece 
4 7 (20) 2 HexWhiteLabelledPiece 
4 8 (21) 2 HexBlackLabelledPiece 
5 7 (22) 2 HexWhiteLabelledPiece 
5 8 (23) 2 HexBlackLabelledPiece 
6 6 (24) 2 HexWhiteLabelledPiece 
7 8 (25) 2 HexBlackLabelledPiece 
6 8 (26) 2 HexWhiteLabelledPiece 
5 10 (27) 2 HexBlackLabelledPiece 
6 9 (28) 2 HexWhiteLabelledPiece 
6 10 (29) 2 HexBlackLabelledPiece 
8 10 (30) 2 HexWhiteLabelledPiece 
8 9 (31) 2 HexBlackLabelledPiece 
7 9 (32) 2 HexWhiteLabelledPiece 
7 10 (33) 2 HexBlackLabelledPiece 
9 9 (34) 2 HexWhiteLabelledPiece 
8 8 (35) 2 HexBlackLabelledPiece 
9 7 (36) 2 HexWhiteLabelledPiece 
4 5 (37) 2 HexBlackLabelledPiece 
6 4 (38) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 109 2697 a Fg(Human-computer)34 b(games.)72
b(T)-8 b(op:)58 b Fh(M)t Fe(O)t Fh(H)t Fe(E)t(X)r Fg(-)r
Fh(T)t(V)38 b Fg(1-0,)i Fh(T)t(V)r Fg(-)r Fh(M)t Fe(O)t
Fh(H)t Fe(E)t(X)e Fg(0-1.)71 b(Bottom:)57 b Fh(D)t Fe(E)t(E)t(P)t
Fh(H)t Fe(E)t(X)q Fg(-)r Fh(T)t(V)38 b Fg(1-0,)i Fh(T)t(V)r
Fg(-)111 2796 y Fh(D)t Fe(E)t(E)t(P)t Fh(H)t Fe(E)t(X)22
b Fg(0-1.)i(Each)c(play)o(er)g(had)h(15)f(minutes)h(to)f(mak)o(e)g(all)
h(mo)o(v)o(es.)109 2954 y(T)-8 b(ony)25 b(comments)g
Fh(I)g(just)g(pick)g(a)g(fe)n(w)f(games)h(to)f(comment)g(upon.)37
b(Hard)24 b(to)h(kno)n(w)f(if)h(my)g(comments)e(are)i(better)f(on)h(a)g
(par)109 3054 y(with)19 b(the)g(outcome)f(of)g(the)h(programs)f
(reasoning.)23 b(F)o(or)18 b(instance,)h(look)f(at)i(11x11)d(game)h
(9m-d.)23 b(In)c(your)f(comment)g(you)g(state)109 3153
y(22)f(J5)i(is)g(losing.)24 b(But)18 b(in)h(my)e(analysis)i(22)e(J5,)i
(23)f(J6,)g(24)g(F9)h(could)e(well)h(be)g(winning.)23
b(Do)c(you)e(agree?)23 b(Does)c(Mohe)o(x)d(agree?)109
3311 y(Ryan:)25 b(no,)19 b(25.W[e10])f(wins.)109 3469
y(Ne)o(xt)23 b(look)h(at)g(13x13)f(game)g(6d-m.)35 b(\224Game)24
b(6.)37 b(DEEPHEX-MOHEX)22 b(1-0.)36 b(1.B[j2])24 b(2.W[g8])e(3.W[d10])
g(.)37 b(.)h(.)f(Another)109 3568 y(close)26 b(game.)43
b(MOHEX)26 b(blunders)f(with)h(54.W[f9];)i(54.W[l11])c(wins.)44
b(DEEPHEX)26 b(sees)h(the)g(win)f(soon)g(after)-5 b(.)f(\224)26
b(Mo)o(v)o(e)f(3)109 3668 y(should)d(be)h(B[d10])e(I)j(presume.)32
b(Perhaps)22 b(I)i(do)e(not)h(understand)e(te)i(comments)f(here:)31
b(at)23 b(mo)o(v)o(e)f(66)h(I13)f(white)h(seems)g(to)h(be)109
3768 y(winning)19 b(after)g(all?)26 b(So)20 b(what)h(is)g(wrong)e(with)
h(54)g(W[f9]?)109 3925 y(ome)f(further)g(notes...)109
4083 y(First)26 b(I)f(see)h(no)n(w)e(why)h(Game)g(13.06d-m)d(w)o(as)k
(lost.)40 b(Incredible)23 b(that)j(the)f(program)e(could)h(\002nd)h
(such)g(elaborate)f(mo)o(v)o(es)g(as)109 4183 y(W[f9])e(or)g(W[I11].)31
b(But)23 b(when)f(I)g(go)g(back)g(a)h(little)g(further)e(in)i(the)g
(game)e(I)i(w)o(onder)e(about)h(30)g(W[b6])f(which)h(is)i(clearly)e
(too)109 4282 y(early)-5 b(.)30 b(Human)22 b(players)f(w)o(ould)h(al)o
(w)o(ays)h(play)f(30Wb11;)g(31Ba12;)g(32Wb12;)g(33Ba13)f(\002rst)i(and)
f(only)g(then)f(34Wb6.)31 b(Ne)o(xt)109 4382 y(the)25
b(same)h(sequence)f(may)g(happen)f(at)i(the)g(right)f(side)h(of)f(the)h
(board,)f(resulting)g(in)h(the)f(position)g(of)h(the)f(attached)g
(game.)40 b(I)109 4482 y(think)19 b(this)i(is)g(a)g(white)f(win.)109
4639 y(Ryan:)29 b(no,)21 b(solv)o(er)h(\002nds)g(black)f(wins)i(from)e
(this)i(state:)29 b(PV)23 b(j12)f(j11)g(i12)g(i11)f(h12)g(h11)h(g12)f
(g11)g(f12)g(f10)h(j3)g(i4)g(i3)h(h4)e(h2)h(h3)109 4739
y(i2)e(g3)g(g2)g(e3)g(f1)g(d2)f(e12)h(d12)f(e11)h(d11)f(f3)h(e5)g(g10)g
(f11)f(d3)h(e2)109 4897 y(In)26 b(game)g(13.11e-d)d(Deephe)o(x)i(plays)
i(remarkably)d(indeed,)j(discarding)e(the)h(ob)o(vious)f(connection)g
(at)i(a3.)44 b(Ho)n(we)n(v)o(er)m(,)26 b(after)109 4996
y(27Ba3)17 b(black)g(w)o(ould)g(f)o(ace)h(dif)n(\002culties)g
(connecting)e(the)i(black)f(chain)g(on)h(the)g(left)g(to)g(the)g
(bottom.)23 b(I)18 b(can)g(see)h(no)e(easy)h(win)g(for)109
5096 y(white)j(after)h(27Bk4)f(as)h(played)f(in)h(the)f(game.)29
b(In)22 b(your)e(comment)g(you)h(mention)g(that)h(47Wk11)e(w)o(ould)h
(be)h(a)g(win)g(for)f(EZO.)109 5196 y(Ho)n(we)n(v)o(er)f(black)h(seems)
h(to)g(ha)n(v)o(e)f(opportunities)e(to)j(defend)e(against)h(Wk11,)g(of)
g(which)g(my)h(analysis)f(in)h(the)g(attached)f(game)109
5295 y(presents)e(one)h(e)o(xample.)j(Other)d(progressions)e(are)i
(possible)g(too,)f(b)n(ut)h(I)g(did)g(not)g(yet)g(\002nd)g(a)g(better)g
(answer)f(for)h(white.)25 b(All)20 b(in)109 5395 y(all)g(this)h(game)e
(sho)n(ws)i(to)f(me)g(ho)n(w)g(v)o(ery)f(deep)g(Deephe)o(x)g(is)i
(looking)d(into)i(the)h(game!)109 5552 y(In)16 b(the)g(\002rst)h
(playof)n(f)d(game)h(we)i(see)g(white)f(answering)f(v)o(ery)g(f)o(ar)h
(to)g(the)h(bottom,)e(playing)g(2Wh12)g(instead)h(of)g(a)h(usual)f
(\(human\))109 5652 y(mo)o(v)o(e)i(lik)o(e)h(2W)m(i10.)24
b(Ne)o(xt)c(6Wc8)f(seems)h(a)g(weak)f(mo)o(v)o(e.)k(As)e(long)d(as)j
(white)e(has)h(at)g(least)g(tw)o(o)g(options)e(to)i(connect)e(it)j
(should)109 5752 y(postpone)16 b(connecting)g(and)i(strengthen)e
(instead,)j(b)n(ut)f(if)g(white)g(has)h(only)e(one)h(remaining)e
(option)h(it)i(seems)g(better)e(to)i(connect)p eop end
%%Page: 1007 9
TeXDict begin 1007 8 bop 1695 -103 a Fm(ICGA)1625 b(1007)-80
215 y Fh(right)18 b(a)o(w)o(ay)-5 b(.)24 b(This)19 b(could)f(result)h
(in)g(a)h(better)e(position)h(lik)o(e)g(in)g(the)g(commented)e(game:)24
b(6Wb9;)19 b(7Bc9;)g(8Wd7;)g(until)g(15Wb5.)-80 315 y(But)29
b(of)g(course)f(black)h(may)f(answer)h(dif)n(ferently)-5
b(.)48 b(\224Playof)n(f)28 b(Game)h(1.)51 b(MOHEX-DEEPHEX)28
b(1-0.)51 b(1.B[a7])28 b(2.W[h12])-80 415 y(3.W[c11])23
b(.)39 b(.)h(.)f(DEEPHEX)25 b(lost)g(earlier)f(when)h(sw)o(apping)e
(this)j(opening,)e(so)h(here)f(it)i(does)e(not)h(sw)o(ap.)39
b(MOHEX)24 b(scores)-80 514 y(gradually)e(increased,)i(and)g(\002nds)g
(a)h(win)f(by)g(mo)o(v)o(e)e(46.)-6 b(\224)24 b(I)g(guess)h(mo)o(v)o(e)
d(three)i(has)h(to)f(be)g(3.B[c11]?)36 b(I)24 b(can)g(see)h(that)f(in)h
(the)-80 614 y(game)19 b(47Bj6)h(is)h(a)f(winning)f(mo)o(v)o(e.)p
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

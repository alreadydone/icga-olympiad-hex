%!PS-Adobe-2.0
%%Creator: dvips(k) 5.95a Copyright 2005 Radical Eye Software
%%Title: rpt.dvi
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Times-Roman Times-Italic Times-Bold CMSY10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -t letter -D 600 rpt -o
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.06.16:1203
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "30 October 2002",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMSY10
%!PS-AdobeFont-1.1: CMSY10 1.0
%%CreationDate: 1991 Aug 15 07:20:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 2 /multiply put
readonly def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
27D1663E0B62F461F6E40A5D6676D1D12B51E641C1D4E8E2771864FC104F8CBF
5B78EC1D88228725F1C453A678F58A7E1B7BD7CA700717D288EB8DA1F57C4F09
0ABF1D42C5DDD0C384C7E22F8F8047BE1D4C1CC8E33368FB1AC82B4E96146730
DE3302B2E6B819CB6AE455B1AF3187FFE8071AA57EF8A6616B9CB7941D44EC7A
71A7BB3DF755178D7D2E4BB69859EFA4BBC30BD6BB1531133FD4D9438FF99F09
4ECC068A324D75B5F696B8688EEB2F17E5ED34CCD6D047A4E3806D000C199D7C
515DB70A8D4F6146FE068DC1E5DE8BC5703711DA090312BA3FC00A08C453C609
C627A8B149D71F3155BFBF5A359E54EFE40EB6AAF7344F336BBDFA5241D39DFD
19DFE4F1B56DCAAEA84D9290E81FFAD8472517CB517C9F8D04EAF8E87A58341D
57386FF17BF29235356C3F85FE85CCB75DFBD407A6B76C198356415768FE0D58
0F0E0665E6B2EFC269256FCE0146C415E35D900293555D8B6CB2AA451586E477
93461FAF0803AE54B9FEE351771B08F9F7D564B5F50CB4E660298DECF4DC0F67
0A4DA5738D89F708019CDFF9443964830B406748B60EF34EA35EDA7DF1C05A1E
A385C5DE4B171FCD735AA0C41E54B09D133E48FCAA3A75F1B05C2AD4CD792534
4160FCF0C48076AD3174E1A970FD9A285EB251E016B2739E373B43F17A1D50BC
02FB2383DACFF35A5503EE8D0C8147908BFF5FA0D9D06F243AA8B4FFFCD8FF4E
ED02BC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (rpt.dvi)
@start /Fa 203[25 25 25 25 49[{TeXBase1Encoding ReEncodeFont}4
49.8132 /Times-Roman rf /Fb 253[77 2[{}1 99.6264 /CMSY10
rf /Fc 138[55 33 1[44 2[50 55 83 7[44 3[50 12[66 32[50
1[50 49[{TeXBase1Encoding ReEncodeFont}11 99.6264 /Times-Bold
rf /Fd 134[33 33 48 33 33 18 26 22 1[33 33 33 52 18 33
18 18 33 33 22 29 33 29 33 29 6[41 1[48 2[48 41 37 44
2[48 1[59 5[48 1[41 48 44 1[48 61 5[18 11[17 1[17 44[{
TeXBase1Encoding ReEncodeFont}41 66.4176 /Times-Roman
rf /Fe 253[65 2[{}1 83.022 /CMSY10 rf /Ff 136[60 1[46
28 32 37 2[42 46 69 23 46 1[23 1[42 28 37 46 37 1[42
11[60 55 46 60 2[65 60 78 55 2[32 65 65 51 55 1[60 1[60
14[42 42 2[21 43[46 2[{TeXBase1Encoding ReEncodeFont}36
83.022 /Times-Bold rf /Fg 87[28 16[83 28[37 42 42 60
42 42 23 32 28 1[42 42 42 65 23 42 23 23 42 42 28 37
42 37 42 37 3[28 1[28 51 60 1[78 1[60 51 46 55 1[46 60
60 74 51 60 32 1[60 60 46 51 60 55 55 60 1[37 3[23 23
42 42 42 42 42 42 42 42 42 42 1[21 28 21 2[28 28 28 36[46
2[{TeXBase1Encoding ReEncodeFont}71 83.022 /Times-Roman
rf /Fh 203[29 29 29 29 49[{TeXBase1Encoding ReEncodeFont}4
58.1154 /Times-Roman rf /Fi 134[37 1[55 37 42 23 1[32
1[42 42 42 1[23 37 1[23 42 42 1[37 42 2[42 7[46 1[69
51 1[46 1[51 3[55 2[55 37 28 60 60 3[55 1[51 20[21 44[{
TeXBase1Encoding ReEncodeFont}31 83.022 /Times-Italic
rf /Fj 167[72 94 1[72 61 55 66 2[72 72 89 3[33 72 2[61
3[72 1[44 11[50 1[50 49[{TeXBase1Encoding ReEncodeFont}16
99.6264 /Times-Roman rf /Fk 167[58 9[58 9[58 2[58 65[{
TeXBase1Encoding ReEncodeFont}4 79.701 /Times-Roman rf
/Fl 138[37 2[25 2[37 37 1[21 10[33 22[29 25 1[54 3[50
1[54 1[33 5[37 7[37 37 48[{TeXBase1Encoding ReEncodeFont}15
74.7198 /Times-Roman rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 999 1
TeXDict begin 999 0 bop 1695 -103 a Fl(ICGA)1662 b(999)490
498 y Fj(?)t(?)t(?)39 b(W)t(I)t(N)t(S)33 b(H)t(E)t(X)f(1)t(1)t
Fk(X)t Fj(1)t(1)h Fk(A)t(N)t(D)d Fj(H)t(E)t(X)h(1)t(3)t
Fk(X)t Fj(1)t(3)i(T)r(O)t(U)t(R)t(N)q(A)t(M)5 b(E)g(N)t(T)g(S)439
780 y Fi(Ryan)20 b(Haywar)m(d)938 750 y Fh(1)991 780
y Fi(and)f(Noah)h(W)-8 b(ening)o(er)1672 750 y Fh(2)1726
780 y Fi(and)19 b(K)m(enny)h(Y)-8 b(oung)2307 750 y Fh(3)2360
780 y Fi(and)19 b(T)-8 b(ony)20 b(van)g(der)g(V)-9 b(alk)3100
750 y Fh(4)1468 1021 y Fg(Edmonton,)17 b(Canada)-80 -6
y Fi(to)j(appear)-9 b(,)19 b(ICGA)h(J)n(ournal)-80 1368
y Fg(T)o(ODO:)g(ne)n(w)g(pix)763 1551 y Ff(Figur)o(e)g(1)p
Fg(:)25 b(P)o(articipants)20 b(and)f(observ)o(ers)g(at)i(the)f(He)o(x)g
(competitions.)-80 1881 y Ff(1.)82 b(THE)21 b(T)o(OURN)n(AMENTS)-80
2125 y Fg(At)k(the)g(2016)e(Olympiad)h(there)g(were)h(tw)o(o)g(He)o(x)f
(tournaments:)33 b(11)p Fe(\002)p Fg(11)23 b(and)h(13)p
Fe(\002)p Fg(13.)37 b(Three)24 b(programs)f(competed)h(in)h(the)-80
2225 y(11)p Fe(\002)p Fg(11)18 b(tournament:)25 b(E)t
Fd(Z)t(O)d Fg(by)d(K)n(ei)h(T)-7 b(akada,)19 b(supervised)g(by)g
(Masahito)h(Y)-8 b(amamoto,)18 b(from)h(Japan;)i(H)t
Fd(E)t(X)t(A)t(M)t(A)t(Z)t(E)h Fg(by)e(T)m(ianli)-80
2324 y(Zhang,)h(operated)f(by)i(Y)-9 b(unxiao)20 b(Sun,)j(from)e
(China;)i(and)g(M)t Fd(O)t Fg(H)t Fd(E)t(X)i Fg(2.0)c(\()p
Ff(Unde\002ned)i(r)o(efer)o(ence)p Fg(\),)e(by)g(Broderick)g(Arneson,)
-80 2424 y(Ryan)f(Hayw)o(ard,)f(Philip)h(Henderson,)e(Aja)j(Huang,)d
(and)i(Jakub)g(P)o(a)o(wle)n(wicz,)f(from)g(Canada.)-80
2582 y(Three)24 b(programs)g(competed)f(in)j(the)f(13)p
Fe(\002)p Fg(13)f(tournament:)35 b(E)t Fd(Z)t(O)r Fg(,)29
b(H)t Fd(E)t(X)t(A)t(M)t(A)t(Z)t(E)q Fg(,)e(and)g(M)t
Fd(O)t Fg(H)t Fd(E)t(X)t Fg(N)t Fd(E)t(T)g Fg(from)d(Canada,)i(with)-80
2681 y(the)20 b(same)g(authors)f(as)k(M)t Fd(O)t Fg(H)t
Fd(E)t(X)r Fg(,)e(plus)f(Noah)f(W)-7 b(eninger)20 b(and)g(K)n(enn)o(y)e
(Y)-9 b(oung.)-78 2839 y(E)t Fd(Z)t(O)25 b Fg(is)f(a)f(T)o(ODO)f(v)o
(ersion)g(of)g(the)h(program)e(that)i(competed)e(in)i(the)g(2013)f
(Olympiad.)33 b(E)t Fd(Z)t(O)25 b Fg(uses)f(alpha-beta)d(search)h(with)
-80 2939 y(an)i(e)n(v)n(aluation)g(function)f(based)h(on)g(a)i
(weighted)d(combination)g(of)h(tw)o(o)i(dif)n(ferent)d(netw)o(ork)g
(connecti)n(vity)g(measures.)40 b(E)t Fd(Z)t(O)-80 3038
y Fg(ran)19 b(on)h(an)g(i7)h(laptop.)-78 3196 y(H)t Fd(E)t(X)t(A)t(M)t
(A)t(Z)t(E)h Fg(is)f(a)g(ne)n(w)f(program?)i(by)e(?)-78
3354 y(M)t Fd(O)t Fg(H)t Fd(E)t(X)r Fg(,)j(the)f(winner)g(of)g(the)h
(pre)n(vious)e(\002)n(v)o(e)h(Olympiad)f(He)o(x)h(competitions)f(\()p
Ff(Unde\002ned)j(r)o(efer)o(ence)p Fg(\),)d(is)i(an)g(MCTS)g(pro-)-80
3453 y(gram)j(that)i(uses)g(the)f(Benzene)g(He)o(x)g(frame)n(w)o(ork)e
(b)n(uilt)i(on)g(the)h(code)f(base)g(of)i(F)t Fd(U)t(E)t(G)t(O)h
Fg(\()p Ff(Unde\002ned)e(r)o(efer)o(ence)p Fg(\),)f(the)h(Go)-80
3553 y(program)e(de)n(v)o(eloped)g(by)j(Martin)f(M)7
b(\250)-35 b(uller)m(,)29 b(Markus)f(Enzenber)o(ger)e(and)i(others)g
(at)h(the)g(Uni)n(v)o(ersity)e(of)h(Alberta.)50 b(Benzene)-80
3653 y(allo)n(ws)30 b(virtual)e(connection)g(and)h(inferior)f(cell)i
(computations.)53 b(M)t Fd(O)t Fg(H)t Fd(E)t(X)32 b Fg(performs)c
(these)i(computations)e(in)h(UCT)i(tree)-80 3752 y(nodes)24
b(visited)h(at)g(least)h(256)e(times.)41 b(M)t Fd(O)t
Fg(H)t Fd(E)t(X)27 b Fg(ran)e(on)f(a)h(24)g(core)f(shared-memory)e
(machine,)i(with)h(4)g(cores)g(reserv)o(ed)e(for)-80
3852 y(the)29 b(Depth-First)g(Proof)g(Number)f(Search)h(solv)o(er)m(,)i
(which)e(produces)f(perfect)g(play)h(if)h(it)g(solv)o(es)g(the)f
(position)g(within)h(the)-80 3952 y(time)25 b(allotted)g(for)f(a)i(mo)o
(v)o(e.)40 b(M)t Fd(O)t Fg(H)t Fd(E)t(X)27 b Fg(uses)f(a)f(book)f(\227)
i(b)n(uilt)f(by)g(Broderick)e(Arneson)h(using)h(Thomas)f(Linck)o(e')-5
b(s)25 b(method)-80 4051 y(\()p Ff(Unde\002ned)c(r)o(efer)o(ence)p
Fg(\))d(\227)j(with)f(tw)o(o)g(11)p Fe(\002)p Fg(11)f(openings.)-78
4209 y(M)t Fd(O)t Fg(H)t Fd(E)t(X)t Fg(N)t Fd(E)t(T)j
Fg(is)g(a)f(ne)n(w)g(hybrid)d(program)h(that)i(combines)e(the)k(M)t
Fd(O)t Fg(H)t Fd(E)t(X)g Fg(MCTS)e(search)g(tree)g(with)f(a)i(depth-1)d
(tree)h(created)-80 4309 y(by)f(calling)j(N)t Fd(E)t(U)t(R)q(O)t
Fg(H)t Fd(E)t(X)s Fg(,)e(a)h(Deep)f(Con)m(v)n(olution)e(Neural)h(Net,)i
(once)e(from)g(the)i(root.)-80 4466 y(T)o(ODO)e(cite)i(Nx)f(paper)-5
b(.)-80 4624 y(Each)17 b(tournament)f(w)o(as)j(a)g(three-player)d
(double)h(round)f(robin,)h(so)i(12)f(games)f(in)i(total)f(with)h(8)f
(games)f(per)h(player)-5 b(.)24 b(Post-game)-80 4724
y(win-detection)18 b(is)j(by)f(our)f(solv)o(er)-5 b(.)-80
4881 y Fc(11)p Fb(\002)p Fc(11)24 b(T)-9 b(our)o(nament)p
658 4959 2235 4 v 656 5059 4 100 v 708 5029 a Fg(11x11)18
b(results)p 1201 5059 V 102 w(M)t Fd(O)t Fg(H)t Fd(E)t(X)p
1592 5059 V 103 w Fg(E)t Fd(Z)t(O)p 1843 5059 V 103 w
Fg(H)t Fd(E)t(X)t(A)t(M)t(A)t(Z)t(E)p 2360 5059 V 101
w Fg(total)p 2607 5059 V 100 w(result)p 2891 5059 V 658
5062 2235 4 v 656 5162 4 100 v 787 5132 a(M)t Fd(O)t
Fg(H)t Fd(E)t(X)p 1201 5162 V 1592 5162 V 594 w Fg(?-?)p
1843 5162 V 282 w(?-?)p 2360 5162 V 280 w(?-?)p 2607
5162 V 196 w(?)p 2891 5162 V 658 5165 2235 4 v 656 5265
4 100 v 857 5235 a(E)t Fd(Z)t(O)p 1201 5265 V 342 w Fg(?-?)p
1592 5265 V 219 w(?-?)p 1843 5265 V 2360 5265 V 664 w(?-?)p
2607 5265 V 196 w(?)p 2891 5265 V 658 5268 2235 4 v 656
5368 4 100 v 724 5338 a(H)t Fd(E)t(X)t(A)t(M)t(A)t(Z)t(E)p
1201 5368 V 209 w Fg(?-?)p 1592 5368 V 1843 5368 V 603
w(?-?)p 2360 5368 V 280 w(?-?)p 2607 5368 V 196 w(?)p
2891 5368 V 658 5371 2235 4 v -80 5424 1493 4 v 10 5480
a Fa(1)39 5503 y Fd(Department)h(of)e(Computing)i(Science,)g(Uni)n(v)o
(ersity)g(of)e(Alberta,)h(Canada.)23 b(Email:hayw)o(ard@ualberta.ca)10
5561 y Fa(2)39 5584 y Fd(CS,)17 b(U)m(Alberta,)h
(Email:nweninge@ualberta)q(.ca)10 5642 y Fa(3)39 5665
y Fd(CS,)f(U)m(Alberta.)22 b(Email:kjyoung@ualberta.ca)10
5723 y Fa(4)39 5747 y Fd(Email:ton)o(y@he)o(xboard.com)p
eop end
%%Page: 1000 2
TeXDict begin 1000 1 bop 109 -103 a Fl(1000)1507 b(ICGA)18
b(Journal)1557 b(???)109 215 y Fg(Here)20 b(are)g(some)g(selected)g
(games.)109 373 y Ff(Game)g(1.)27 b Fg(E)t(-)t(M)d(0)t(-)t(1)t(.)j
(1.B[a7])19 b(2.W[sw)o(ap])g(3.W[c9])g(.)12 b(.)g(.)108
b(M)t Fd(O)t Fg(H)t Fd(E)t(X)22 b Fg(sees)g(the)e(win)g(by)g(mo)o(v)o
(e)f(30.B[e4].)109 1661 y @beginspecial 0 @llx 0 @lly
175 @urx 108 @ury 2275 @rwi @setspecial
%%BeginDocument: 0556.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates
10 10 (1) 1 HexBlackLabelledPiece 
6 6 (2) 1 HexWhiteLabelledPiece 
6 5 (3) 1 HexBlackLabelledPiece 
7 5 (4) 1 HexWhiteLabelledPiece 
7 4 (5) 1 HexBlackLabelledPiece 
8 4 (6) 1 HexWhiteLabelledPiece 
8 3 (7) 1 HexBlackLabelledPiece 
9 3 (8) 1 HexWhiteLabelledPiece 
6 9 (9) 1 HexBlackLabelledPiece 
5 8 (10) 2 HexWhiteLabelledPiece 
10 1 (11) 2 HexBlackLabelledPiece 
9 2 (12) 2 HexWhiteLabelledPiece 
2 10 (13) 2 HexBlackLabelledPiece 
5 6 (14) 2 HexWhiteLabelledPiece 
6 2 (15) 2 HexBlackLabelledPiece 
4 6 (16) 2 HexWhiteLabelledPiece 
3 11 (17) 2 HexBlackLabelledPiece 
5 10 (18) 2 HexWhiteLabelledPiece 
3 9 (19) 2 HexBlackLabelledPiece 
5 9 (20) 2 HexWhiteLabelledPiece 
3 2 (21) 2 HexBlackLabelledPiece 
9 1 (22) 2 HexWhiteLabelledPiece 
6 7 (23) 2 HexBlackLabelledPiece 
5 7 (24) 2 HexWhiteLabelledPiece 
4 11 (25) 2 HexBlackLabelledPiece 
5 11 (26) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1659 w @beginspecial 0 @llx 0 @lly 175 @urx
108 @ury 2275 @rwi @setspecial
%%BeginDocument: 0556.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates
10 10 (1) 1 HexBlackLabelledPiece 
6 6 (2) 1 HexWhiteLabelledPiece 
6 5 (3) 1 HexBlackLabelledPiece 
7 5 (4) 1 HexWhiteLabelledPiece 
7 4 (5) 1 HexBlackLabelledPiece 
8 4 (6) 1 HexWhiteLabelledPiece 
8 3 (7) 1 HexBlackLabelledPiece 
9 3 (8) 1 HexWhiteLabelledPiece 
6 9 (9) 1 HexBlackLabelledPiece 
5 8 (10) 2 HexWhiteLabelledPiece 
10 1 (11) 2 HexBlackLabelledPiece 
9 2 (12) 2 HexWhiteLabelledPiece 
2 10 (13) 2 HexBlackLabelledPiece 
5 6 (14) 2 HexWhiteLabelledPiece 
6 2 (15) 2 HexBlackLabelledPiece 
4 6 (16) 2 HexWhiteLabelledPiece 
3 11 (17) 2 HexBlackLabelledPiece 
5 10 (18) 2 HexWhiteLabelledPiece 
3 9 (19) 2 HexBlackLabelledPiece 
5 9 (20) 2 HexWhiteLabelledPiece 
3 2 (21) 2 HexBlackLabelledPiece 
9 1 (22) 2 HexWhiteLabelledPiece 
6 7 (23) 2 HexBlackLabelledPiece 
5 7 (24) 2 HexWhiteLabelledPiece 
4 11 (25) 2 HexBlackLabelledPiece 
5 11 (26) 2 HexWhiteLabelledPiece 


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1040 1843 a Ff(Figur)o(e)h(2)p Fg(:)25 b(Some)20
b(game:)26 b(E)t Fd(Z)t(O)r Fg(-)r(M)t Fd(O)t Fg(H)t
Fd(E)t(X)c Fg(0-1.)i(Some)c(game:)p eop end
%%Page: 1001 3
TeXDict begin 1001 2 bop 1695 -103 a Fl(ICGA)1625 b(1001)-80
215 y Fc(13)p Fb(\002)p Fc(13)24 b(T)-9 b(our)o(nament)p
619 293 2314 4 v 617 393 4 100 v 669 363 a Fg(13x13)18
b(results)p 1162 393 V 101 w(M)t Fd(O)t Fg(H)t Fd(E)t(X)p
1552 393 V 104 w Fg(E)t Fd(Z)t(O)p 1804 393 V 103 w Fg(H)t
Fd(E)t(X)t(A)t(M)t(A)t(Z)t(E)p 2321 393 V 140 w Fg(total)p
2646 393 V 139 w(result)p 2930 393 V 619 396 2314 4 v
617 496 4 100 v 748 466 a(M)t Fd(O)t Fg(H)t Fd(E)t(X)p
1162 496 V 1552 496 V 594 w Fg(?-?)p 1804 496 V 282 w(?-?)p
2321 496 V 257 w(bronze)p 2646 496 V 619 499 2314 4 v
617 599 4 100 v 817 569 a(E)t Fd(Z)t(O)p 1162 599 V 343
w Fg(?-?)p 1552 599 V 219 w(?-?)p 1804 599 V 282 w(?-?)p
2321 599 V 257 w(bronze)p 2646 599 V 619 602 2314 4 v
617 702 4 100 v 685 672 a(H)t Fd(E)t(X)t(A)t(M)t(A)t(Z)t(E)p
1162 702 V 209 w Fg(?-?)p 1552 702 V 219 w(?-?)p 1804
702 V 282 w(?-?)p 2321 702 V 257 w(bronze)p 2646 702
V 619 705 2314 4 v -80 828 a(Abo)o(v)o(e,)g(playof)n(f)g(results)j(are)
f(inside)g(parentheses.)k(Here)c(are)g(some)g(selected)g(games.)-80
1117 y Ff(2.)82 b(CONCLUSIONS)-80 1360 y(Ackno)o(wledgements.)39
b Fg(W)-7 b(e)26 b(thank)e(the)h(NSERC)h(Disco)o(v)o(ery)d(Grant)i
(Program)e(for)h(research)g(funding)f(and)i(Martin)f(M)7
b(\250)-35 b(uller)-80 1460 y(for)19 b(the)h(loan)g(his)h(machine.)p
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

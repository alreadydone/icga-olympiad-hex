%!PS-Adobe-2.0
%%Creator: dvips(k) 5.95a Copyright 2005 Radical Eye Software
%%Title: info.dvi
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMBX12 CMR10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -t letter -D 600 info -o
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.06.20:1245
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 58 /colon put
dup 63 /question put
dup 66 /B put
dup 67 /C put
dup 70 /F put
dup 77 /M put
dup 79 /O put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E2A1040FAF2DE1FD6AFD5FD97EAAB614
956897A7BC784E9865B00EE8B49B918E886049F1F4939403EADAB83A4D8C332E
2221AF8F6F4A4954501CB6A6268AC96F7091245F034BD65542DF47BC7BBAD667
1EE6AF9187E298CB7AABA58E3FB5B4C7E86616C1A830A4A937C265CC28A83EED
8F3C971D6DF5A50A615B713F5332E0CF05C754FD76916FECE4DB2807334C34E1
E2418FFF1B4429A564AB857F1E23337C75E729645AEBE7F8967630A40E00F8C1
3054F2BE2768682E50D0B43E3CE3897D9EE7257E77F9894CD4395C21585D16F8
AEFE05217ED4F78C31FD635A00CE5D0DFC7B0A6BF9444B62C836087731D6D205
24A45B3C8D80983A67377EBC88C3F36121DE0957AD1610C7FFED2F5728DAA51E
A53D617553D5C57CB1722553E997ABE85A338241A35C0F08B752FE2134FF5A86
2FC683DAA0E0C0072EAB471FA444491570EBF12F70F2863F9CBC2CE3E13F3A3D
0F6A0A2483964AA9CEFF0C08B845AB92F0C55B0955D0756D91BEABC4E2DBF2F9
E98255142B63EDE17CE234CDE014444509B2B12CE977FDD3C50DB40D2B141DCC
1B61999BE72CEF18EAB4507F13960BA93FBFA8DEB729D0B8281D9A8AE5106607
64EB06C3E874B88A2E4F455B6C40B5B910E41AF4F90FD3ABD529B568E9ADFC71
83A85BEF5F37D69CC9C71C59A0D0F33022188CAA9D0ADA37E382B549903534CC
577FBE9D2FBC52DDC7B6906FF094D17A439A44E7477256AD72BFFA217887A284
F7BF16CED0A4C4EAD767B1E40BDD0632A5265801CCF955C1E3FE0FF82BBE5348
A8013D21EF68000A5E4AF0DC3ACC24C6B2018DAF6B6A64EA35318B5BAE543C44
CB36D158F10C2E00527D222D5E7677C1C4F859C3BB322CAF3600D7E813416601
43CC844A757BEDCD023BA0AF5CF1CB0057B83582619C466D7BCE18776EAE78D5
9BF38D1B43BB7DCA4AC9B4A2254FA1522DA2EAADFEA472B6E0CDBED6539991B6
92F1F17F8AA38638C7C47E3D4E44D8127278E243314F53B606A451547EFE9C11
BAEAB87E7827B8321C7FD25344A65F0925DEE3553DE203B07E4595236366605B
A9D4C190216FF5F5FB836A284FF731353DCBDBE24CE9EF1C63753826C5CBDA74
AF82909FB1D1F5ED832211454B3676D8A59944E5FA8B3C8F4CB4C6290F44CFC4
A44C270F7BD539A707A12DD046DC9706980AD04B97DB7F5AF9D869E1F2FC3FF4
B3BB8BD48BA694011E44673A17D6C5E3203CE27B1D93940B9B635EA15F05F7AD
4489A6C9E736A9B409F213D980ED2A5FE90884B051300C269B22A04A606DDDEA
5F47F9B5D712C7FA52B8B5D293520DDA37E7B09571C89965E329D5452E0971D4
F6B1B9F5C00CBF8143AAD9517C3076DCCB4DDED779F26B4BD235D46ECAF3F99F
0EE015F44E0D146FAB8B7861F424AC2A9633A5F5F7A684AB3537735CB24CF6E0
EB3BC0141D9D3FD1C71969BE6FDCE88E34ECC0BBD6098003E6A9175D5B399DC1
7E85E79C6EFF6E0DD66EFD383C473D3B21C08667523664D5166CB1C274C28051
D17C1F5CFBCA49E24C8E1877254FE47412324463F8FEE5DE7BB9183DB9A49FCE
5B49C83A99FAEC72E2251199CE183720FFD3E602F3F1D6FB0E2FCD75547F2003
13C370283509E9E619A65F1AF462FFE31F22C5283FFC01D3EBC481EF4342C341
C50E82886EDF490329E22B9AC7B8B83CCA07B90541812D0676B25F58F9E8A412
908982F4D0592EFF90A1519DB7E003987EDB9C736335F6B6D49F6AA54DB46574
B2B343DA3AFD88C926B7DDA9E85B7787C0BBAFC3E3D7B7C241F49D1945B78A33
43A6FDF184D4922A31DAF5BC7C4695EF802863BCCCA6205F13AE081834F42D4B
50C488D18C23872410F5923A8FFD97D5408608CFFF664C7BAD2E8B03937100C1
AB92041E4F7A64D86F7C220F9A3E6104160BF0E2FBD1F00375ADA9925362F3E7
3ECD84DF6C1F542BB1C481CD48E14A23014BB53CE516B667887FE9E2E9E79139
EA57C99D1B4124990D6769A21CF08F0290D7BAC78DC9C65D897136B8F1C41FBA
00F83D605430EF644DEDCD81BE74647AA21C773C62375AEF1AD544366A9EDD65
844F2C9AB327BD5105032EC240527A43A35883B6B51F8682BBC5F52FCF372808
7CF82444C8E9316378FC8AE4C897BD7266D3F5C5EE9F2DDAB6152EB80A93010C
E513D50CF96D212AD77EB1866A1F7A3696849AAA48776183CE0EA8460453AA27
4755482849FD6AA47E3D2112796FF5213A02D6CBD4195811F5343B0449008B03
D018B0DF1CF52D89F6BE3AD22FA62FAA6F4A856B71AFC6E4727067383A2A840B
DC16B4102639A0E5F9AF5363E10BD527DDCD6616D0E7A0DD2D703C607962964C
3A0B539D4DFB07FE65A311B004EE662410A8CA9821CF48CC4F8CFD9B4FCEDCEB
C5CE69F44EBFCF639E6CA39F0F98D1ED9AE148F5FA963BDBFF5B51377312C5B2
2D03F13B2B08B8C1D61E4CA8DDA47B0D3A143A7BFB75FBD4BADDB5DBC54FC21D
A7490E08A86AE651877747E366AFADDC60CED88884EE0E59849E1009996B897C
91E3E48B7AB88A409DA1145023688C54E75ACA7823F1F7C3B96035263DE65357
F52F4B152CF7CE453164F698CCBD614FBA4DB74CD5537D7F7990A4FF075F7ADD
D336AC15A62218F87E2166CE5137CBFDB41A2F7F1CA1F45B26DD4D6C575B5A61
36BB78E27EE7480EE1F502B4CE4AB4B2FDE4BE25DA225A8D5E942F6F5D00524E
E6BDFA18B0553E7E45E76FA4C6D273D305E1A92646883F42617347962D62B5D2
5FAF2BA69477CC13301E481574795BF86303B17FCDA2C73E41B147BD42E25548
87CF51C55B54D9CEAA22FE1B29DB444DC31DC1A0E76F76F1C098182C1AE433E7
1E65D72A27BA3CD47C4A30DA0C33CAB6396210EDF60CFB6F0E0488F2F4370D2C
3ECC2B51BC1C629397CB473ED647014295C5D23E339C88CA821FC4332815627D
588061BDF4798B5B49A411AF4018A06B9AEDE682EFD4EF53D5A4E9ABF08B18C1
79B76A3B90AB324E5B630CDA7B94CD0F898FACE85E517CF33D73C62E3990F566
A6D3080AAC6AA2842D4694C59C0A78FD4E39C081CFA8D47579FC67AB3270B1FF
2AEC50A7ED3E0EABB2DC645CAE1A570A08AB161B2040FB0AE84C4D5D56932410
764C23C9B72A233F39D6E9C951BB14053A3A32852199263599CA43172ACD0A95
9FE28B17959C620A0D39A070D1FCF441B3F96814457E2C9AF7BA48F4FD1502CA
10CAFD01476BD678700BF4EFFAFE76A2DAAF95DA0AEBF48F59056B9E1B4B8B2E
2D85EA432D608B5724980C8F65867AF45E321CF83D347D0A2D898B158EEE0B3C
A6CE6278FD247FB994CFB733E2B0A2FE974233AEBED423CC2ADCA42CF38D7F9C
6F9719D2B194613C5464B6742C7179126117C72B30A5ECD1AB945F48C9399B41
3EB160DDB0C433D7AF45FB53C2AF80643275BB9FD9CF846B32F0EF0393866955
7846DF07D3A054422094B92A9613567229AE39BDCB51A2C0AA144CEED8371666
07D54963992666CC95E5E89914FD1DAF9E5CDD240920C92F67809B815436820C
2E74140A20FCBDCD1F1AF1BFD304A8902A99A615C2A4E1B9C3EB6FFE6C3FC1B3
661607DF96D298A14B123C7F7A861B1585C5FB4251F40B0CAFCEB41205E5B058
BE72B5B06FA5B8EC72693FF04F3DE6206280EA1BE6EC4ABE9B76D7F4AE091E3E
552D5146D1DEB6423642ACC6F0508CEC94C4E45029EF3727266A6482924AF3FA
A38347DD13754E03B5819D3D9F4C7E8E8EFA73718B17341C72DB940686F236F7
5DDCA14A66B2BC01E0F832C0B3B88EF00BF10D8079F2FCCE20FFB354CCAD2B28
3CBBFC3B0110C0BECF8CF5BD57F9709029790F2DBCC9F5F11961EBCCE4A240EA
E3BD91CA1EA4C03E68915C6A3BC50B1F73F446076D17C4DC27B12CE8E9CA3D62
EA6C03FAE53211F83F58BD4D719F1EE855EC493803FEBB0C2C9675819DDF67A0
FCBDC1A8C30E2145168537F8D240DF21A7374FDA60C958E5F6B1C4B14E66F625
DECBCD674DF040562A8AEA46B69C7A609A66D850678579D41F76317DB9804E80
924219DA2483FEEBD7DE8C40F32AA428A0C5E6D16886E1D4BEF85C27C87147CF
452847C1C54BEF48C3CCFA385D095F2B621C4344D03960AB544EF102540E676C
2E46B6F8C2BD1FAEA872059BD19BACF0F71933A10AF5ECF301F202111C1BF1C3
B80B150B2CCBCB238295B4C3AAABA466D930AC33682AC042770AA98E5370993C
93A301544DF72358EBCE84AB2A8C04D2484A3FCEA178F76FB2C5A904878FBEE1
C5F34CA6CF74458DFA3C78AE13FCCE9C94782F786129191E3596209C80FCC7DE
94E7E40549AC788DBB73D10CEFF64609826EAEC7369C0408E0F0041551254CBD
3F8EBF2ABD4B1100643475DCB333227F492DE1322A2BA1D4EA99E4E60940DC59
8DD3984A9B4520F480B72307EEA3AC8A67802696E1B18184734DD81164832BF0
A87724D0B5884060C69258E2C0ED9E90DB79D0B2B4BC9815530649B44F2950DF
2B2A7DD064F4CE68FA7172ECF9F787A29F04BE591A0A759B6AA81C4566E7CDBA
25C35A8379BAE7F5AFD09DE9A8B154FA6B24B534BA4DFD8A0E837AECADE88830
007491B86D2C171124505A2BE3D58593E7FBBA7A198A73242C02A8C7E0EFDAF8
6E2122625351B45C040E760FADC88CFE9CCDF0A34F528B2E251A6ED45AC912F9
CBFF0BF61811E39B70143AC64E33D3D29421674FE8CF795330C4D799FAF3F82D
E7C5C7A5E0FD163035C649CB06545102BF4C16A6840E5BB51EA323FD1551759B
40342EEA7D7FF891592D48FADFA34A5F92E3C9D2E448BC093CDA53C6090B4CA3
58335DAC1F3218C8D90212EA3F73F0EB72ACD8083C76931A4546B1F0049F3B20
A757945E7271941429AE62B59D02D14B1BF482EDD5BEA05B3ACC80B77D7C5EC1
C3126EE7AE9E86FAB227C1888436A8C74E73D557F93549E2AA4517B9A5FAE024
268D74106612AA55EEB67422EE6908E73CF3C4BD9AE28016E14D9B2C5123D472
D7EBFE8DDDB5D1F611C5CCF5FDAB256C5D6A62E9BDA24982338BBE53584B3EEF
0F546B7AA4E7975DEBBCE258D6E6A916AEEF169BCCE9D83512B52513AF8EC33F
E7A9AFD45D344D69AF5EB8738F46F42F922CF91A54F2FA7F41247E01A6229E22
1D58F0F315B5166B8856489A72FC2EBB0A35C3F9D4EA6E44E9CF6B9E4FEBF5D8
92109C99331BDBA0352A3C3D1E476AA733A8D6E98340D5EC47B5FCCA26749140
67DA3F9C4D5385D9A632AE67B7844D64359AE4E8A35B03908C74A5EBCBD80E2A
3FDCF377F857C6E12C6822FC6184321D5BACFAE96B1848873571BB572106376F
90215C58F9ED16FD766A5B748D9379E1293BC42CAA984EEFD0DC95B34703C0CF
1AC0572CFD59A9DDBB1CB980663472EEED014409EFF4099B70F181C5268401E3
96C4FACC4464F8A0E0502A2AEB6C4A2F8374CD9961324B00B4244D298E3CB2FC
2D1D281F84AA5CA756D34093D7214187F210C3E1D68D6A907825F0C7BE31B511
693CA446B153FEE4DA45718BC7EED9F19E0F5D49100C05FD810293BAEE2DD34B
7DC99B0D2B69E8C16928FE2514A01367C2E5E385ACB1DACCDE111E8528238FEB
B3A6AAAFD50FC3B4CC06F803B26B2B6D0BB282CD33A6928E2958081E2C05ACB1
D4E9A9A20F2C67593CE9926555896A892B548EAFC656A83607FF645651745E20
C661E71D95BAD2BE4EF24A77EA7EFF3F30AD7AC6BB68D68B8AA83CFF12C4CB4E
C60213C4C823EF1822C3051158B0CABB5E3620168443B5B23F72A141455BEB66
16BDD1F4E8F3698C67E3B0AD0976C93B79D2DAB8E97F4A71B650166B5D781757
6F692A2BD589955518979DF45293364AAF5CB5F30F656C87F67BD71C988F8554
681DDB3D6C6B273E04E8C41615B223289399073801A539A286E23776CEEDCDD9
D75EAEA4F3EA0212CB8E53F81AE505AF24D765106F0E70F74B4FEB045B182BBF
2B6ED54775B389ADF4056D7C8C2DB381A306A71B806819FD3EC591621558AFB3
84473893EF71256BAA16E7A74FFA4A38AD9B49D372BB532E18AFA28FB674647E
667FA9070179BA7E0FC79B816D7945BED91CF892AB9A91621E47363FC703DEFD
D7E2F21037F7CDA2273638A2D5F22180CF6D91C7464D199FE2AED2AD10AE47BF
8E6146356B7CA751385AB8BD23B3164F672C9CF1434DCC3099526E8F6D14B716
15C00BD1107B1E2AB892EFA525974AA944FE2BFD70D06028EAB50A0820778367
5459D914340FE40BE6FA85A89702086BDC8565B02E78C41DE207FF7FD2FBE28A
C8A97E1770041ADBB73A4096A911EF10D668F8C19FDE048F30EA8DFE6EA5B034
4B91204DF35E936841AEFE8827EE3D078A4B820781459463130AF35F09A6982A
DDB0229FC1C97E8A7D0F2E769C7982648F9C937224596B9CAA7D7C8A9943B72D
98E695CB9E7B52BA05BA81B1A9D5425968B5D7B8BE4953BD849D71D5F16226B8
5E00D96791925A01BA4A899BE4293142B2B0071383A793C516803806F7D58CF9
1D687472EE896A589E59FB1C28D7C1A4D314321368B788DDA4BFC185BACB9C70
21CAAD845F3E0074368D60D9D824372789090F7B003C872A6E52E41B93014000
BF6E72FEAA7261C5505B9D5615FEDEE622F965F881224E02F80BBF593F4EB2DB
BC954FD84B766F792D942758C35188E2CEAB225A2609A9300EC6F62DB558DD4E
3E5737DA8570B1AB6E6005732248217DE5800A49A9ABAAFB57E21BCA44A53F12
CF051649F1AA8364C4922D22D1769D73A6686611DFDED6B5224E5C15EFE5636C
ADF535B9D696BCB41A0D084E05F1C69C19F9B3FD6CFF9EE300B0B4DADFF5F3F2
9CC373BFF5957E2283FF201A4BFD3BA2795AB1F8E963D59BB4984F4AE80C99F8
9DF27CC715E844FAF38BE9555FFA0C68D7A3B27D68248FA9AA473C61D94ED2C6
B148BD62B9AE8860AC9A942C5B032781C5E428ED3BCEF5A7B0B572F4D54AA958
F2920C6D0473C5046199590BF1D17E4505536E621F23BFE50851E42D5C9F84F4
F97F46B5E848AE60435E84B166532331E9EDA9DD95AA153B28F30480BD43552A
30C9C0FC40D3029CD04523139395E65C5DB270C1558560B887578BDCF30F4846
EEE83E6754FC221B2507E75D4FC234CD8922FFF92D0AD0CA906EEEA0675CBBD1
CAF740DD78692F4681E5F9DF4EF42679BB22982B5C66C2A61EABC5EDDA159BBF
04F39797A20F8615E6804725A43929CA826DA604891F7F68CEF6AB8A7D567E51
0F8DD5D2CF1D78B34E78859C28C0B24F8E819B41DABC1BB98149465EAC708733
6A38A735559C35C7C2CC36EC91F3882C634900E1EEB108979D494BCD47B7009B
948A2ED236992CAC97F4C6E9C91EDC852FED40EE8C3A56C7B1BEB41ABED838FB
1FE378436187AAF27A870D3E8EAA0293B248CFF0E4DCB104E3C43A14D5926556
B23E0CF52A9BAE0D3587D6B94FE2DD402D9CF7BA9CADEB01B20F1995C7A08CFF
884E3595A0046BC11EF6707C95CA7812078211AA514E9997BE6E53A5F4261BCD
631132DA690037D6ED75D6599ABB4B1C439E0676397EBD2B85E4532E0AC160D0
8A101ACCDD1C206B56DDD0130F430172DACE6CAB4A7E3923AD16F42CBA648110
BC0813EC3B8BD7282AC374F2147EA79FC385ED2AA6E1EA4D23FA2B1DCFF11CFE
2487D6B228C8421AAD06DD422BB2C2983DDD79B04C956B8399BACEB70B71CBA5
3653992F2A00554AA2B4B84D3528D5B8F71673DBF3CE2FBF983E4E781460D140
17C941093CC2DD5C5D45CD9B576C99FD6AF7E780F83CA726E6005552F50DDB1D
5992F343552DA7F7E40304D8B94B6D31506BF9D66A9B1EBF5950AF122F4D9F09
4A5726B73F3597455F4AAA621E70E4094B94CA3D1E037FDABFC6B1845F302791
F469B681231818C71D82FA700CD6A44E1DB820009579B7ABE4A7EE61E1633DA4
CDCA5350982F1748500E4556C4E46A08F51C14B16DC9F96F14311F1BF25D83F3
F40A369F041FFDE45CFAE05C57EE8950421E2C0C003FE95E6792CC0E08D75E89
18CCC9D63C58C552857665C28683E040AB26B41E6CB1540BE7140588B1EF44DC
5575386B7C44615F32CAC3007108BF2D727E62ABFD3ACFBF6401338C3BD2A654
80E61E804F8E550730C9F12BB48437090BEE58139391EE921BB0402937359D21
A9C62CD12E700FA08E98BA137AB4B143BD3065325E646F414CC5D868D9637B62
3EFD0DE65320ABED1C5B5D5F05AE5836458B65733E389463DDB7C5A535A46C90
A421E2451329921BDA8F12C35ACEFD17E78023443B0D32C7C8832804FC5EE644
6A612AE31BABD2041A508A02A69D6C4AA837C2914C85E7003F3A0FAEE5E3DD80
AABFE6C618DD497529B6EFAA83114181B445ACA89675E8549AC7770188316ACE
6472D805FE62B3EA80BAAC9348DD076168DDD66AD1ED4B1F5EADE22B5131B740
2A8F79BAAE143A62BA55B30834B1B42D05F88216A0951B57DBDE4427303FF0F5
EE71B30692D527C3046679FFD4FDBA390F824366DE442275A7664AAA36B7A6AE
D43186FE058C80A5E2EE89D0B88CB9AE795747B74597C053B8F5F4C475CCDE28
8370454CCA6F0F53E8B8B8216325B94809EE67451C5CB44D972362888090CEAF
593DC06C1244E8F1C0AD9ED688F9F736DD176D910DB4F57BCC851DC6487E3254
0A2180602EFA346BF934A92FCF95104EFEDFA63A5AB2ABEAAB5F182FF987824F
1A1A2EB1FC22B1F464F5CD419D14253E1F7F52D2B62BE7BB577975969CAE1E83
9DD7AE8CCCA9BA343CE081042A76F5AE1533919A4F7F4F7D56FD036D43297057
C06B983D600FCC5602D470EA1312D5D4CD1C21717C3C3B40323DAAEF137FD629
EF3AD7581BDA5FB9028BCB078F03C67E4AC80678E713E28C3214B63866517CCE
32742C003CA52BCDFD6C5D134336EA2343251787B29C2EE589CEA07C0D6B992E
7DD33E1980DB88AC48DA121218C52A6F0F5F1D15ECB5D51706C4C4B505541156
6F0BA5259027764F11395354285CAD0B4134F6EA337A53556B8639780FDA423C
EED4111D690E73ECE3BEDD67C69E0BE02029B4F399085A8CED436A63ACE4E2C1
8085CDC5F9085B32340DA1E23F4BC9A65850F9F4809D3C4488939FB0884EA796
00D9974A08962C07FB8406CC7CA3B4044E17EB106BB65387D27380B06AF2D743
91C3D7D2AB1655DFAF73757F7FC943259306E622AB814807B4E7283215FC3F17
2E69E86A9E6313D534DD60CB1920A0A4A1BAD528E635CCDC44873FB4CC542C1C
BE3A3BF78CDB81B0949577799FFB1796DA07365547C742C1204F6461384D496C
0BA697E16FA39B4A2CDCC39C1A98794E768382813102197B304B54FE436961B3
09698C18DF470AC334E313C1BB8B73B646D6B454D5DE7C306C9085AF6BAC6139
E85489D377FB3C2F24B6CC24A642661ADEC8510F4609381160C9F806ACD122A6
5E65BF1C6152F0189BA9FE5F29B1375151215815539BFBFF6C7ACBEB786B1F9D
71079307615CA9A90F8B212AA4249F72140C15FEC4430D7AD697CB5E7D8251B3
8A87D8E2B0B09DC1A4139DB6DD161E0CFEF4DBC6E6A843E6041099E4D8A449BD
CE5E90209D0CA36991E76F6B934A74F67419E0739C4BB76E4D683791173FF7A3
56FA0689D7274B5BAB524CC2E0B7C60B632ED3B508EC7550753DC05EF9F4A575
4904FBB5509FB7E72DEB6B3444E4CC4C1B6D59616F7BF437441CE988E4DCED1D
942483CC8E6F88BD02578D5188870BF7DA468B1A6F80B5DDE828D3A51D890E6E
F1712EF5D5D9DF682E683B1AF524AB3ADC4CBE64186868797BDA1269C08A0C3D
7BB336FB306EEF37C271F6A68D326F1622618C03063CDA56EC5331A0BD6950E1
96B18DCC6BDCD1ABC2233AB7150B5C6E8A50460AAF811C7EE5ED46D029F4C75A
F31AC96F5E61984208C3D2B32690ED87064866FA923AB835BF237466CCCDE59A
2343E8C84E8CF49E6F7B472A9231FAFB8BD388E68C602F87B0CF15674B91D3A8
5544C07BA1E40CDBFB3AEAD48DFE31C491CFDDDF468F3E405BD158FB431CB811
0F0156CEE4F7A8D5C8859AE55537D2FA7937767112A37A3F34C115C092193A78
F45C8C5C808EFD09F78DA11160B8CF66A846F16218BC180EEA9712705F2C4AB6
D4526F1DF56E2FD9FCA34E0FDF062BC8768D8777F841394E7FE3D9DA5C9C9CB3
BCDC2F863F75AEA1FB6EEE8074FF5825F92B6647A4B54421883B9BCEFB12F547
26DBAD380DC127CE49BA20D428A5A3242B22C914122894BBF64EDF8B2CEFE6F9
11B29394A90B5FF3D87E0B12408E02D8BF42519E15DEE788BAF813EC0AE3E510
D5B535D3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 54 /six put
dup 58 /colon put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
AEBE70DAAED49EA45AF94F081934AA47894A370D698ABABDA4215500B190AF26
7FCFB7DDA2BC68605A4EF61ECCA3D61C684B47FFB5887A3BEDE0B4D30E8EBABF
20980C23312618EB0EAF289B2924FF4A334B85D98FD68545FDADB47F991E7390
B10EE86A46A5AF8866C010225024D5E5862D49DEB5D8ECCB95D94283C50A363D
68A49071445610F03CE3600945118A6BC0B3AA4593104E727261C68C4A47F809
D77E4CF27B3681F6B6F3AC498E45361BF9E01FAF5527F5E3CC790D3084674B3E
26296F3E03321B5C555D2458578A89E72D3166A3C5D740B3ABB127CF420C316D
F957873DA04CF0DB25A73574A4DE2E4F2D5D4E8E0B430654CF7F341A1BDB3E26
77C194764EAD58C585F49EF10843FE020F9FDFD9008D660DE50B9BD7A2A87299
BC319E66D781101BB956E30643A19B93C8967E1AE4719F300BFE5866F0D6DA5E
C55E171A24D3B707EFA325D47F473764E99BC8B1108D815CF2ACADFA6C4663E8
30855D673CE98AB78F5F829F7FA226AB57F07B3E7D4E7CE30ED3B7EB0D3035C5
148DA8D9FA34483414FDA8E3DC9E6C479E3EEE9A11A0547FC9085FA4631AD19C
E936E0598E3197207FA7BB6E55CFD5EF72AEC12D9A9675241C7B00AD58FAF645
1297991B5D01701E82228D0313FC7C66B263BC79ACDDF9AAC48A3CBF42B96E38
583E1D059953076D68148DC8B6C9527B3A74CE7DEF788A11531F44120BDF0F61
0B2F3ED94EEBCDE4ACD23834C242AA4314B9EF98E4BE72DB76EBDD0A028CEA9D
B4C38C1F2D24B8FDE686832FE96204552C820E45B6BAF0C3308742AE28661742
70616F47ECC9F6899E06FF70A245394CA1C34E8B77C7554504BFFFC347640D80
2BB2BFD96A9FB5F0DF27ED4164F9064FAE61E03B0FB3C3E3EB15A5FF63732CBE
A49ACE4863C365B2803A6BF778BB64151B3BE4EB67E5B07BDA397B6847F54BAF
D04B5C25F459BB7FDD1985DB9F2E4BE953F33EA7A3D3A636A1E265B6FC0381EE
CD9DDF2AF7596B94BD1200A4C9FF5CD77AA77AE37C681475CE67C6FEF98B4478
8D52EA62CEB62A6CF07648F7F6B0A8AAEAA4340C6569EB58E8833F7C4444E1D9
09A727A3A44D0D9894CBA8753522D2C50687A91A4011A20C2A9B9396216FAB5A
4547B2773BC08794B471D3C789B0788E3AB78E586F12FEF33E40E049D9738132
409165806E8E8C82E3335255317F758D80B38E9C1C55CA7EFFAD926E85637EF8
67EA21111897E2C8F9A9260EF261B8BED39B4F63A0A4180D6AEEC0EAB3147F57
48B6F8BA96BC8B90B8BF0886D4C736386794E92CB830AB7D5FB1D235951A5A57
F4F5430C8878266D50F8B96B6160A4D99981F9AB1446C8EC0B94848F9C637D1D
15D4AD83570FCA66EF46C07A08E85031684B68D9E95D585A1E1EA8AFCC1BDEB8
67D5D0B99B567E75895AF41E264F8B3BCFB430796C8045EDE64EF9477352E6E4
99FA188E89B5B81EBE6131AECC3C30462CC19F802AFC50209CCDC77E6167309F
D25EFED474A4D11F9A1A4A109498104D9D40AB7FFA391D7D504D91F119D9747C
44F64447A1A8329E6D6A879E5F7AD6E300CCB0A17F0400E50A01AC8CA44481B2
E224D06D8F7DEA77BC9D3CADB8198734DB1D14BC8208B7469E32D0C6F9E77EBA
0AC67EF607EF7426A6E2712E1DD9293EFAA7DDB70F642C6ED01B201D72F9545D
E2B87903F30641AB34943346AA35F2D34DA129B1C000D84B7EE04FF3775FB157
77C85D8541A4B029F5916435C392C86F38FE6E69728AC0FEB2117628DC5DB9A8
F38288EA59BC291DC7D7E1D35845CA569F76C607039D4FF7696AB6AD4BFCEF27
6F89A0000A1DD25F576BA51D9111D25EB49F0B786C0359A02A597F9B4BB5EBA5
EDBFB3CCFB58A3CDD381F12F6CEFCDF993F14F4B4929127655B290D56EF00971
9BFE158669126201C523245AD19A21221A5117BAFD51EBFD19623DDA516B31E0
F228BB114B70C4F0DB2618D48F3242D285C98C973CD15DE55BCAD611564EA4CF
5B44898E133B79180AC1E4D35F104EA1B2CD7979AB90AE0F04C60E25805616C2
7CFECA3F6BC012F414EADED5AAE08CD9F8E78C79B674222EEB58E603F20F4D20
7C436921BED2FDCE56CE70FA524ABB8D377E371987E2C1DDD8F24B2E4872E924
6F09E3180588D213F314F57D8C9F99283402BB7A4B4C4BF49450522CA0B9CC8E
72AB12D9AC275F5B54E63CF0B665BB18F08237DD6EE8241C85143F9C6DD9FBD1
A04DA194C18EA987CFEFD1AD7C3B1E4ED90AC2DFFFBCCF24DD09CD2A6C3574EA
6CEA0D58A147B47348342FADB7A057504855153E384EC34CDC2002ADB653472C
B902A46A4A368FF5B0344EE688D9CB6D9E4358374369C9F701E83B8D63A44F71
191FCFD67DDBB180DCA5564E299D80E9B7CA6A36E2E9AE93307B59EF11011420
05ED44B5AB25E4371A1AFB1EC2B344B16BEE73B71F927EC8808BBBBD6526A363
465070AFE39F78FF4C3F89AAEC2033F9F368DFC31FEFA6A243AF2E7C511FF12B
F6B638E321B7C24AAD0351E5D98C524D729176218DBE474DFD3DCE4D73AD473B
CD9BA080B236C29F6358A2DE686FAAB5E7DCB3CD514FE4E5861E8D371538002E
E9A608C12ED812B1E4BDC883A56393DFCED09A11FAAFD19F6D95AC4282FFC2ED
462F9A7470EB921AAAD529938C8B15C22D7D1AB2CF4C8D280FE161136FBCFECF
EFFF8DEAF4E47CD2F9F6555CB3D57151282C7ADC1F9FB65CFAF491B5DB1EE352
977F94B5A33011129B55D4CC4BED804247E235B988B4D382B0DEE5DE1821FFDE
BEBDBDFA529F3D9308864819F6C8DA1D9F11DC78572F86CFBDB815E7353A51E5
D6590299930F1B6C8C3AF9FBB339078B6D130E7E3AD8783EEFB9EA4F3485716F
1AE5D87584FC49D0059FA85AC73BE30DB861EEB2D57D18DBA0EE1B3A1BDA89FC
3AE63317B01FCD9FAB5016C1BEB7564C1258E4B718C13B48F4791AD4CF224BB2
E2DC70AC21CA7DB382D8E7B08B51DF4F4824BECE30A3D9311AC89E109E3F7CCB
D2DDEAEBEEC567B94C6DD10B0A2BFE614D5B8D2BE45C7F3CAFEF4B4879324171
B365FF6912960B0878F28B5635AE2E2084D40AD83BA3F47DBE0FC2886287D5CA
9777EDF9BD0114776D8BF47685D45A58133554BA3763802F1954CC6E74366A3F
3197E64D86804F5E04FCC76AD8DD7D7978497C568B850655EB520841D991D454
0D58F3AAEECCB485A8DF3B2B731DB0C1E97F8CAA41CABCCF353303D60CB56F79
FD453B5071DB14AD26BF432831ABD031FB947CF0C836250E6E334CEEAEFD0C84
9D70CA9A46FE9DF4FCDF682476308A1D8973A484FD67B896E00E29066A347A6B
2155CE5FFD78E751E1332A42E6D01DEF24B6F98B2C89AA06AF07B92351F3CEDA
A5595F98CB836749D293D311621A33F9756FF79A1C5590AA4669A9C065A63E50
6B8643787D8036E0045D1FBC92BD369F1579EE782BF10FD56CF9314CACEE9326
28B5B769AA1352DA9E1A9EFD92A754F5694AAE80CD7F0C84BF4114F7457D76A8
337F6539822966CC5BCBD8B282EE6BAB82D7599CB1B0C56A21A02F3968D3E9E6
99477087C1A7BFBE76DC68D77C7BA0A9A8905AB941406EE24E08D21FFBF5E7DA
AB79AC00B46C3621E7C9E847A0566530673B01DFC24BB790046F48867768223C
33932A59D5BB30C98899EFBDD7CDD8283FE713FB7D63D0D6677B888A2487618C
D0CC17D08644838FB74290223218BF45BBE53BF531754A6F94C13CB4559D3300
255FC4E07258CA973740D68A9E5EBA058360D6B2CB97AC3DD0DB4D56E049669F
773B17B2D2AF5BD55DF26FB5E126E0114868054B504DCC98D6E5515BD035FF18
1A2E990C561845A843A8380C4438F8CE06AF8C55AD16A4E665293CEB11576528
75270EF2E0A8C512DD5183C5AF961A6CDE1068C2FBBF3A8A389EE43B79FDEFD0
DB4B413BC618B406EBE5055B3332C3CA43697856B7ABDFF5F6096A6DCEF7A05A
286D72D21357F74143FA483D4AB6622208EEBC6E3E069F168C2F8F726DCF0786
264A7368E2D5F71384A24FF008F8536E8094ABB150128D0252E3AEB7D4EC81E7
9AAC42E144AA69B2D7AAB6268F2A054640038D59B7D0BEBD05FDF7AB83E1F85F
4904B69ACE8E4A756264AFF0FD7621ED87DF4ED1CBF69E16CB6161BD0651359C
D2F001404A7198398C07F20CDD58B608EABC7BC9FF358AF0E17C9A1461752461
D79B7B2D11954A21F9DE66839D57ADF2E8106ECF63F6BAD9CC47E78A5A42A919
670615855C7EE16EFEBC250A5150D226C6DA86A49B213ECE3F02BD0EF0016F97
9F12A919BAA1E97532D889147C4CF0EF0E0CB80AB20E2AE91AFC87CA155D51C5
DB49F0833FF569D2B752FBB9E1EB35000A48C7E9F6A1BF6704690B48A661EF1D
F33081445D481CCA0BFE00AEE0EC52ADA84EB6C00CD6D374642AA98B5E8CAF48
6A5B8927117DC1F4CC00406F95CE3AE87F0246E90D7F73FCFBF8E457BD740BD4
EBC1CBCCD3959D008BC0DFABF926B510F356409076A5429413797E2116DDFF10
7D6A45F348D9961C6847AD8C52D0FF22FB7F5F0BD80E896447212BECA3154AD2
6EFABCB51633B4EAFAACA10620F4F6E58AEB1AB9D6C81C4797CC4A0ACF6D8060
209A27D81DDC27A2336D9FDB1CCF54EEF8B3AA53D76DB97F6B70E7D3C99D1867
B1CBF59539DF9958DFD29C5806499FCDF930AF8E7BB285420785CA8A51B9B20C
1998270B6FF64471BB700B1698F2BD4C08E706A1CB8A338793489C1BE4FD1E2D
D3F37D60612C55B36B22D7BC637B1E8CE11D507431B6BB25D74683A64BD4DF70
6FBDDAAA02FD7482393B3E9A423E2D28306A728D61E658D0F610ED2E3C15596B
D739E3FAC2A3B8A235601EE90AD3DC8BB11E0A049C7EEFA0FD49E25D54B289C2
F9021702F910C38F3FA4E48DBF9F8020D3FFBBA7A2A5B28667B32AAAEF7FECAA
ACACF86DAF512F6613079A99F5EEAD018FCB7386B7FA6253D393DBD4979F14E9
EA978CD343C184C1D4B42AFF35C4E24E8932D40830881BC9AB5494ED961945AA
D2C3352E15568C8C7A8B307A4506A64EA7DA1F298EE557DD7CF8A392AB97221A
FCF83EC59FC64209191BEE8D97D04A378E41016163B94C5364B5096C8D0DB0C8
EE6EA958BBE8A81CCA00AEFA828647D33F3AE0C67896571572CC7421AD53897F
0DD00A61CE9F39FF9A88BC5B608F2B6030FEEAEDAA005D2A9A1880572D2FD29E
07283C08ACBF18A0D29880C782C57E6F41E3A154DBBA8ED4884DE5AFEA2493F1
593B8300F3756F399ABBF89C66DEB30A51F88436C24F54A89CFE3317EC1A0B55
401D91ED925CF40E646B5C63247BDBFED515FB8C6CC3540FFB990EF35DA4898F
3D8B5089F5C697A3FBCD790BDC129F0003223DF507268E0B7CA2BDB51244383F
461294E1E6A419DF1A83208B61B57DDF54430ADC5B4C6DD063EE7CC377D42D9E
12B7776994602E6A561BDA2A80F03916FB1912898D008491B2BD798337BE9CCF
D5DA8DA1336A9770E7FE3B2D1E1B148EFA1731791B9D37CF26AFE60417AE019C
B380CD6BF945D96FAF15895E66DF607B3204E764E66806414E5B36925250E9DA
FAB3352A2007102CDC18DF2428BCF762E659E8D88CBCC85BB087E54DCF30FCE4
42AC03A2A7052D0B57F3B6CE985096161D77AF53A55ABF47831E317DF5F86758
2499A6AB9BF236B36A3360202E560D91DF5D85FD0F587D46178927D89E685FF9
C8D93A7D40180A25E3391CEEFDFE14B561A3535FBF1E076E4116BCE5A0A3644D
B9B620839194126A969BFD5C5D31AA43CBA916768733FAFE43276AAC85C32C60
C403B0FDAEB1065E82B81A2B00F130B99B76F54F83B3118C736815804731CE82
CE67EAE00A6D8FEA724AB989B29E27E1159FE35850BBE38C18730DF0E1BB4B23
4C2B30DF744F6716E4B49527589D6608FC9186104EA6C25DC711CFC6998317DB
68CEF623F9E331AA0BA37E0EE2834DB94D974131F41B3387FEEA12FD51775C98
56994EFD2C713EBE940740566710AE7E5246D6DE6BB2815E0B95B52BFFE994CC
BABD0F37C53C3E3D4D5E2909163722F01C4AAECA0418B1A4B77B97082AE96B56
1BB18DDF89431541F4BA88B2DA8336CC81F85E43C83545EBAF8F7BE4B7F6B44F
AD36DBE9C6E0CEE4D8C8CC2BF87E3955FF598990262F7056D754F535810530D9
17513D015335BFF185F5235B64FC25D36DE227CB1B4BDE33450A8A1EAD9EBCB0
6CE315ABA9C03570120342140629E86D03E658A27084D677B0A28394B2669635
30C01D3F8928050967277E67977AC9476BCB586323BAACA918D54F0A3C59177C
FA9A5606603CE2497E931ED4E8914F6FA7EAF1DEAA10112E67C4EA2E7F0BBD9E
777968D7CC42674833AE1B1965A80C331918738F7E040769061C7B0EA2DD3F28
A80A9DB8919B25BE7C973377251CFBDB91A6E07AF0E8CEF3C4522D2373FE34CF
80612E9A20EDAEE9F0254C747CC27CB659F4A7974CC57D088EBCDDAFA6534535
88ACC3C6C200B5F598CE803034B692054C81857CA8E635870E954A84678FDEC5
6BDCAF19
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (info.dvi)
@start /Fa 134[44 44 60 44 46 32 33 33 1[46 42 46 69
23 44 1[23 46 42 25 37 46 37 46 42 17[65 1[76 6[54 2[60
59 2[39 4[23 5[42 42 42 42 42 1[23 28 23 31[46 12[{}39
83.022 /CMR10 rf /Fb 134[71 71 97 71 75 52 53 55 1[75
67 75 112 37 2[37 75 67 1[61 75 2[65 38[37 3[67 2[67
67 67 67 1[37 45 45[{}27 119.552 /CMBX12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -128 -45 a Fb(2016)46 b(olympiad)g(not-sw)l(aps)
-128 2413 y @beginspecial 0 @llx 0 @lly 175 @urx 108
@ury 3500 @rwi @setspecial
%%BeginDocument: data/pix/swaps11.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 175 108
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 99 def
%---------------- Variables -------------------

/DimX 11 def
/DimY 11 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates
1 1 HexBlackMarker
1 2 HexBlackMarker
1 3 HexBlackMarker
1 4 HexBlackMarker
1 5 HexBlackMarker
1 6 HexBlackMarker
1 7 HexBlackMarker
1 8 HexBlackMarker
1 9 HexBlackMarker
1 10 HexBlackMarker
2 4 HexBlackMarker
2 5 HexBlackMarker
2 6 HexBlackMarker
2 7 HexBlackMarker
2 8 HexBlackMarker
2 9 HexBlackMarker
3 11 HexBlackMarker
9 1 HexBlackMarker
10 3 HexBlackMarker
10 4 HexBlackMarker
10 5 HexBlackMarker
10 6 HexBlackMarker
10 7 HexBlackMarker
10 8 HexBlackMarker
11 2 HexBlackMarker
11 3 HexBlackMarker
11 4 HexBlackMarker
11 5 HexBlackMarker
11 6 HexBlackMarker
11 7 HexBlackMarker
11 8 HexBlackMarker
11 9 HexBlackMarker
11 10 HexBlackMarker
11 11 HexBlackMarker


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial -3 4884 a @beginspecial 0 @llx 0 @lly 207
@urx 126 @ury 4140 @rwi @setspecial
%%BeginDocument: data/pix/swaps13.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 126
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX 13 def
/DimY 13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

%%---------------- Program -------------------

FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates
1 1 HexBlackMarker
2 1 HexBlackMarker
3 1 HexBlackMarker
4 1 HexBlackMarker
5 1 HexBlackMarker
6 1 HexBlackMarker
7 1 HexBlackMarker
1 2 HexBlackMarker
13 2 HexBlackMarker
1 3 HexBlackMarker
13 3 HexBlackMarker
1 4 HexBlackMarker
13 4 HexBlackMarker
1 5 HexBlackMarker
13 5 HexBlackMarker
1 6 HexBlackMarker
13 6 HexBlackMarker
1 7 HexBlackMarker
2 7 HexBlackMarker
12 7 HexBlackMarker
13 7 HexBlackMarker
1 8 HexBlackMarker
13 8 HexBlackMarker
1 9 HexBlackMarker
13 9 HexBlackMarker
1 10 HexBlackMarker
13 10 HexBlackMarker
1 11 HexBlackMarker
13 11 HexBlackMarker
1 12 HexBlackMarker
12 12 HexBlackMarker
13 12 HexBlackMarker
7 13 HexBlackMarker
8 13 HexBlackMarker
9 13 HexBlackMarker
10 13 HexBlackMarker
11 13 HexBlackMarker
12 13 HexBlackMarker
13 13 HexBlackMarker


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial eop end
%%Page: 2 2
TeXDict begin 2 1 bop -128 -45 a Fb(mohexnet-v-mohex)46
b(results:)61 b(op)t(ening)45 b(a1.)23 b(.)g(.)68 b(a13)-128
2294 y @beginspecial 0 @llx 0 @lly 207 @urx 128 @ury
4140 @rwi @setspecial
%%BeginDocument: data/pix2/mnt-mx.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 207 128
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 117 def
%---------------- Variables -------------------

/DimX  13 def
/DimY  13 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/GraphVertexSize 1.0 Scale mul def
/GraphLineWidth 0.5 Scale mul def
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HexLine { % a b c d
    /d exch def
    /c exch def
    /b exch def
    /a exch def
    newpath
    a b HexCenterPoint moveto
    c d HexCenterPoint lineto
    stroke
} def

/HexCurve { % a b c d e f
    /f exch def
    /e exch def
    /d exch def
    /c exch def
    /b exch def
    /a exch def
    newpath
    a b HexCenterPoint moveto
    c d HexCenterPoint e f HexCenterPoint HexRadius 2 mul arcto
    e f HexCenterPoint lineto
    stroke
} def

/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexPLBoard { 6 dict begin %point-line board
    gsave
    BoardShade setgray newpath
    -1 DimY 1 add 0.5 mul HexCenterPoint moveto
    1 DimY HexCenterPoint lineto
    DimX 1 add 0.5 mul DimY 2 add HexCenterPoint lineto
    DimX DimY HexCenterPoint lineto
    DimX 2 add DimY 1 add 0.5 mul HexCenterPoint lineto
    DimX 1 HexCenterPoint lineto
    DimX 1 add 0.5 mul -1 HexCenterPoint lineto
    1 1 HexCenterPoint lineto
    closepath fill 0 setgray
    1 DimY HexCenterPoint moveto
    1 1 DimX { /i exch def 
        i 1 i DimY HexLine 
        DimY 1 add 0.5 mul -1 i 1 HexLine
        DimY 1 add 0.5 mul DimY 2 add i DimY HexLine } for
    1 1 DimY { /j exch def 
        1 j DimX j HexLine 
        -1 DimX 1 add 0.5 mul 1 j HexLine
        DimX 2 add DimX 1 add 0.5 mul DimX j HexLine } for
    /topx 1 def /topy 1 def /btmx 1 def /btmy 1 def
    DimX DimY add 3 sub {
      topx DimX lt {/topx 1 topx add def}{/topy 1 topy add def} ifelse 
      btmy DimY lt {/btmy 1 btmy add def}{/btmx 1 btmx add def} ifelse 
      topx topy btmx btmy HexLine
      } repeat
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j HexVertex
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        %DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	%i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/MagicStone { 4 dict begin 
    /size exch def /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 1.3 mul size mul 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/BWStone { 4 dict begin 
    /wsize exch def /bsize exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 1.3 mul wsize mul 270 90 arc
    closepath CircleLineWidth 1 FillAndStroke
    i j HexCenterPoint CircleRadius 1.3 mul bsize mul 90 270 arc
    closepath CircleLineWidth 0 FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/HexVertex { 2 dict begin /j exch def /i exch def
    i j GraphVertexSize HexDot
end } def

/HexLine { 4 dict begin /j2 exch def /i2 exch def /j1 exch def /i1 exch def
    GraphLineWidth setlinewidth
    0 setgray
    newpath
    i1 j1 HexCenterPoint moveto
    i2 j2 HexCenterPoint lineto
    stroke
end } def

%%---------------- Program -------------------



FlatTopBoard
DrawHexBoard
1 HexBoardBorders
AltHexBoardCoordinates

9 1 .5 .25 BWStone
2 1 .8 .6 BWStone
4 1 .75 .5 BWStone
11 1 .75 .25 BWStone
3 1 .6 .4 BWStone
10 1 1.0 .0 BWStone
7 1 .25 .75 BWStone
12 1 .0 .75 BWStone
13 1 1.0 .25 BWStone
1 1 .6 .6 BWStone
5 1 1.0 .25 BWStone
6 1 1.0 .25 BWStone
8 1 .5 .5 BWStone

5 2 .4 .5 BWStone
10 2 .2 .4 BWStone
6 2 .5 .2 BWStone
7 2 .6 .3 BWStone
4 2 .5 .4 BWStone
12 2 .7 .4 BWStone
8 2 .6 .5 BWStone
2 2 .5 .8 BWStone
1 2 .3 .7 BWStone
11 2 .3 .5 BWStone
9 2 .6 .3 BWStone
13 2 .5 .5 BWStone
3 2 .7 .3 BWStone

 1 3 .4  .6 BWStone
 2 3 .55 .45 BWStone
 3 3 .75 .25 BWStone
 4 3 .5  .5 BWStone
 5 3 .65 .35 BWStone
 6 3 .6  .4 BWStone
 7 3 .65 .35 BWStone
 8 3 .5  .5 BWStone
 9 3 .6  .4 BWStone
10 3 .55 .45 BWStone
11 3 .25 .75 BWStone
12 3 .6  .4  BWStone
13 3 .65 .35 BWStone

8 4 0.9 0.5 BWStone
10 4 0.8 0.4 BWStone
11 4 0.4 0.7 BWStone
13 4 0.6 0.2 BWStone
5 4 0.5 0.1 BWStone
9 4 0.7 0.3 BWStone
12 4 0.5 0.2 BWStone
3 4 0.4 0.4 BWStone
7 4 0.7 0.3 BWStone
4 4 0.6 0.7 BWStone
6 4 0.5 0.3 BWStone
1 4 0.7 0.6 BWStone
2 4 0.3 0.5 BWStone

3 5 0.5 0.5 BWStone
1 5 0.3 0.8 BWStone
11 5 0.5 0.6 BWStone
5 5 0.7 0.4 BWStone
7 5 0.8 0.5 BWStone
12 5 0.3 0.4 BWStone
2 5 0.4 0.7 BWStone
10 5 0.2 0.5 BWStone
13 5 0.6 0.4 BWStone
9 5 0.7 0.5 BWStone
4 5 0.6 0.5 BWStone
6 5 0.6 0.3 BWStone
8 5 0.6 0.3 BWStone

4 6 0.6 0.2 BWStone
6 6 0.7 0.3 BWStone
10 6 0.5 0.5 BWStone
8 6 0.6 0.3 BWStone
13 6 0.5 0.5 BWStone
12 6 0.7 0.3 BWStone
11 6 0.2 0.3 BWStone
2 6 0.7 0.4 BWStone
1 6 0.7 0.5 BWStone
3 6 0.5 0.5 BWStone
5 6 0.7 0.8 BWStone
7 6 0.5 0.3 BWStone
9 6 0.7 0.5 BWStone

7 7 0.8 0.4 BWStone
12 7 0.6 0.4 BWStone
4 7 0.7 0.6 BWStone
6 7 0.5 0.5 BWStone
9 7 0.6 0.6 BWStone
2 7 0.7 0.7 BWStone
8 7 0.6 0.4 BWStone
13 7 0.5 0.6 BWStone
3 7 0.6 0.6 BWStone
5 7 0.6 0.4 BWStone
11 7 0.5 0.5 BWStone
10 7 0.5 0.3 BWStone
1 7 0.7 0.7 BWStone

7 12 0.8 0.4 BWStone
12 12 0.6 0.4 BWStone
4 12 0.7 0.6 BWStone
6 12 0.5 0.5 BWStone
9 12 0.6 0.6 BWStone
2 12 0.7 0.7 BWStone
8 12 0.6 0.4 BWStone
13 12 0.5 0.6 BWStone
3 12 0.6 0.6 BWStone
5 12 0.6 0.4 BWStone
11 12 0.5 0.5 BWStone
10 12 0.5 0.3 BWStone
1 12 0.7 0.7 BWStone

 1 13 .4  .6 BWStone
 2 13 .55 .45 BWStone
 3 13 .75 .25 BWStone
 4 13 .5  .5 BWStone
 5 13 .65 .35 BWStone
 6 13 .6  .4 BWStone
 7 13 .65 .35 BWStone
 8 13 .5  .5 BWStone
 9 13 .6  .4 BWStone
10 13 .55 .45 BWStone
11 13 .25 .75 BWStone
12 13 .6  .4  BWStone
13 13 .65 .35 BWStone
showpage

%%EndDocument
 @endspecial 282 x Fa(Figure)27 b(1:)36 b(Mohexnet)28
b(win)f(rates)f(b)n(y)h(\014rst)g(mo)n(v)n(e)g(and)g(color.)35
b(Op)r(ening)27 b(mo)n(v)n(es:)35 b(a1.)13 b(.)h(.)g(a13.)36
b(Blac)n(k)26 b(pla)n(ys)g(\014rst.)37 b(Column)27 b(a:)36
b(3s,)-128 2676 y(min)30 b(?,)f(rel1000.)38 b(Column)29
b(b:)40 b(3s,)28 b(min)i(?,)f(rel2000.)38 b(Column)29
b(c:)39 b(mohex-mohex.)h(Column)29 b(d:3s,)f(min)i(100,)d(rel1000.)39
b(Column)-128 2775 y(e:3s,)33 b(min)f(10,)g(rel1000.)47
b(Column)32 b(f:3s,)g(min)h(40,)f(rel1000.)47 b(Column)31
b(g:3s,)h(b)r(est.)375 b(Column)32 b(l:3s,)h(b)r(est.)49
b(Column)32 b(m:)-128 2875 y(mohex-mohex.)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
